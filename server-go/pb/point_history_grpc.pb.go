// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: point_history.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PointHistoryServiceClient is the client API for PointHistoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PointHistoryServiceClient interface {
	// general
	// create
	Create(ctx context.Context, in *PointHistory, opts ...grpc.CallOption) (*PointHistory, error)
	// update
	Update(ctx context.Context, in *PointHistory, opts ...grpc.CallOption) (*PointHistoryBoolResponse, error)
	// delete
	Delete(ctx context.Context, in *PointHistoryIdRequest, opts ...grpc.CallOption) (*PointHistoryBoolResponse, error)
	// get by id
	GetById(ctx context.Context, in *PointHistoryIdRequest, opts ...grpc.CallOption) (*PointHistory, error)
	// get by uuid
	GetByUuid(ctx context.Context, in *PointHistoryUuidRequest, opts ...grpc.CallOption) (*PointHistory, error)
	// get by order id
	GetByOrderId(ctx context.Context, in *PointHistoryIdRequest, opts ...grpc.CallOption) (*PointHistory, error)
	// get onsale list by user
	GetSoldListByUser(ctx context.Context, in *PointHistoryUserIdRequest, opts ...grpc.CallOption) (*PointHistoryList, error)
	// get purchaed list by user
	GetPurchasedListByUser(ctx context.Context, in *PointHistoryUserIdRequest, opts ...grpc.CallOption) (*PointHistoryList, error)
	// get list by id list
	GetListByIdList(ctx context.Context, in *PointHistoryIdListRequest, opts ...grpc.CallOption) (*PointHistoryList, error)
}

type pointHistoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPointHistoryServiceClient(cc grpc.ClientConnInterface) PointHistoryServiceClient {
	return &pointHistoryServiceClient{cc}
}

func (c *pointHistoryServiceClient) Create(ctx context.Context, in *PointHistory, opts ...grpc.CallOption) (*PointHistory, error) {
	out := new(PointHistory)
	err := c.cc.Invoke(ctx, "/point_history.PointHistoryService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointHistoryServiceClient) Update(ctx context.Context, in *PointHistory, opts ...grpc.CallOption) (*PointHistoryBoolResponse, error) {
	out := new(PointHistoryBoolResponse)
	err := c.cc.Invoke(ctx, "/point_history.PointHistoryService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointHistoryServiceClient) Delete(ctx context.Context, in *PointHistoryIdRequest, opts ...grpc.CallOption) (*PointHistoryBoolResponse, error) {
	out := new(PointHistoryBoolResponse)
	err := c.cc.Invoke(ctx, "/point_history.PointHistoryService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointHistoryServiceClient) GetById(ctx context.Context, in *PointHistoryIdRequest, opts ...grpc.CallOption) (*PointHistory, error) {
	out := new(PointHistory)
	err := c.cc.Invoke(ctx, "/point_history.PointHistoryService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointHistoryServiceClient) GetByUuid(ctx context.Context, in *PointHistoryUuidRequest, opts ...grpc.CallOption) (*PointHistory, error) {
	out := new(PointHistory)
	err := c.cc.Invoke(ctx, "/point_history.PointHistoryService/GetByUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointHistoryServiceClient) GetByOrderId(ctx context.Context, in *PointHistoryIdRequest, opts ...grpc.CallOption) (*PointHistory, error) {
	out := new(PointHistory)
	err := c.cc.Invoke(ctx, "/point_history.PointHistoryService/GetByOrderId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointHistoryServiceClient) GetSoldListByUser(ctx context.Context, in *PointHistoryUserIdRequest, opts ...grpc.CallOption) (*PointHistoryList, error) {
	out := new(PointHistoryList)
	err := c.cc.Invoke(ctx, "/point_history.PointHistoryService/GetSoldListByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointHistoryServiceClient) GetPurchasedListByUser(ctx context.Context, in *PointHistoryUserIdRequest, opts ...grpc.CallOption) (*PointHistoryList, error) {
	out := new(PointHistoryList)
	err := c.cc.Invoke(ctx, "/point_history.PointHistoryService/GetPurchasedListByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointHistoryServiceClient) GetListByIdList(ctx context.Context, in *PointHistoryIdListRequest, opts ...grpc.CallOption) (*PointHistoryList, error) {
	out := new(PointHistoryList)
	err := c.cc.Invoke(ctx, "/point_history.PointHistoryService/GetListByIdList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PointHistoryServiceServer is the server API for PointHistoryService service.
// All implementations should embed UnimplementedPointHistoryServiceServer
// for forward compatibility
type PointHistoryServiceServer interface {
	// general
	// create
	Create(context.Context, *PointHistory) (*PointHistory, error)
	// update
	Update(context.Context, *PointHistory) (*PointHistoryBoolResponse, error)
	// delete
	Delete(context.Context, *PointHistoryIdRequest) (*PointHistoryBoolResponse, error)
	// get by id
	GetById(context.Context, *PointHistoryIdRequest) (*PointHistory, error)
	// get by uuid
	GetByUuid(context.Context, *PointHistoryUuidRequest) (*PointHistory, error)
	// get by order id
	GetByOrderId(context.Context, *PointHistoryIdRequest) (*PointHistory, error)
	// get onsale list by user
	GetSoldListByUser(context.Context, *PointHistoryUserIdRequest) (*PointHistoryList, error)
	// get purchaed list by user
	GetPurchasedListByUser(context.Context, *PointHistoryUserIdRequest) (*PointHistoryList, error)
	// get list by id list
	GetListByIdList(context.Context, *PointHistoryIdListRequest) (*PointHistoryList, error)
}

// UnimplementedPointHistoryServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPointHistoryServiceServer struct {
}

func (UnimplementedPointHistoryServiceServer) Create(context.Context, *PointHistory) (*PointHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPointHistoryServiceServer) Update(context.Context, *PointHistory) (*PointHistoryBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPointHistoryServiceServer) Delete(context.Context, *PointHistoryIdRequest) (*PointHistoryBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPointHistoryServiceServer) GetById(context.Context, *PointHistoryIdRequest) (*PointHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedPointHistoryServiceServer) GetByUuid(context.Context, *PointHistoryUuidRequest) (*PointHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByUuid not implemented")
}
func (UnimplementedPointHistoryServiceServer) GetByOrderId(context.Context, *PointHistoryIdRequest) (*PointHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByOrderId not implemented")
}
func (UnimplementedPointHistoryServiceServer) GetSoldListByUser(context.Context, *PointHistoryUserIdRequest) (*PointHistoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoldListByUser not implemented")
}
func (UnimplementedPointHistoryServiceServer) GetPurchasedListByUser(context.Context, *PointHistoryUserIdRequest) (*PointHistoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPurchasedListByUser not implemented")
}
func (UnimplementedPointHistoryServiceServer) GetListByIdList(context.Context, *PointHistoryIdListRequest) (*PointHistoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListByIdList not implemented")
}

// UnsafePointHistoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PointHistoryServiceServer will
// result in compilation errors.
type UnsafePointHistoryServiceServer interface {
	mustEmbedUnimplementedPointHistoryServiceServer()
}

func RegisterPointHistoryServiceServer(s grpc.ServiceRegistrar, srv PointHistoryServiceServer) {
	s.RegisterService(&PointHistoryService_ServiceDesc, srv)
}

func _PointHistoryService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PointHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointHistoryServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/point_history.PointHistoryService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointHistoryServiceServer).Create(ctx, req.(*PointHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointHistoryService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PointHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointHistoryServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/point_history.PointHistoryService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointHistoryServiceServer).Update(ctx, req.(*PointHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointHistoryService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PointHistoryIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointHistoryServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/point_history.PointHistoryService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointHistoryServiceServer).Delete(ctx, req.(*PointHistoryIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointHistoryService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PointHistoryIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointHistoryServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/point_history.PointHistoryService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointHistoryServiceServer).GetById(ctx, req.(*PointHistoryIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointHistoryService_GetByUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PointHistoryUuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointHistoryServiceServer).GetByUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/point_history.PointHistoryService/GetByUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointHistoryServiceServer).GetByUuid(ctx, req.(*PointHistoryUuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointHistoryService_GetByOrderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PointHistoryIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointHistoryServiceServer).GetByOrderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/point_history.PointHistoryService/GetByOrderId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointHistoryServiceServer).GetByOrderId(ctx, req.(*PointHistoryIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointHistoryService_GetSoldListByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PointHistoryUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointHistoryServiceServer).GetSoldListByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/point_history.PointHistoryService/GetSoldListByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointHistoryServiceServer).GetSoldListByUser(ctx, req.(*PointHistoryUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointHistoryService_GetPurchasedListByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PointHistoryUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointHistoryServiceServer).GetPurchasedListByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/point_history.PointHistoryService/GetPurchasedListByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointHistoryServiceServer).GetPurchasedListByUser(ctx, req.(*PointHistoryUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointHistoryService_GetListByIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PointHistoryIdListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointHistoryServiceServer).GetListByIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/point_history.PointHistoryService/GetListByIdList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointHistoryServiceServer).GetListByIdList(ctx, req.(*PointHistoryIdListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PointHistoryService_ServiceDesc is the grpc.ServiceDesc for PointHistoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PointHistoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "point_history.PointHistoryService",
	HandlerType: (*PointHistoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PointHistoryService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PointHistoryService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PointHistoryService_Delete_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _PointHistoryService_GetById_Handler,
		},
		{
			MethodName: "GetByUuid",
			Handler:    _PointHistoryService_GetByUuid_Handler,
		},
		{
			MethodName: "GetByOrderId",
			Handler:    _PointHistoryService_GetByOrderId_Handler,
		},
		{
			MethodName: "GetSoldListByUser",
			Handler:    _PointHistoryService_GetSoldListByUser_Handler,
		},
		{
			MethodName: "GetPurchasedListByUser",
			Handler:    _PointHistoryService_GetPurchasedListByUser_Handler,
		},
		{
			MethodName: "GetListByIdList",
			Handler:    _PointHistoryService_GetListByIdList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "point_history.proto",
}
