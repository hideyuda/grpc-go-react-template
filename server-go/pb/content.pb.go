// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: content.proto

// Specify package name to avoid name collision

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Content_Currency int32

const (
	Content_USD Content_Currency = 0
	Content_JPY Content_Currency = 1
	Content_EUR Content_Currency = 2
	Content_GBP Content_Currency = 3
)

// Enum value maps for Content_Currency.
var (
	Content_Currency_name = map[int32]string{
		0: "USD",
		1: "JPY",
		2: "EUR",
		3: "GBP",
	}
	Content_Currency_value = map[string]int32{
		"USD": 0,
		"JPY": 1,
		"EUR": 2,
		"GBP": 3,
	}
)

func (x Content_Currency) Enum() *Content_Currency {
	p := new(Content_Currency)
	*p = x
	return p
}

func (x Content_Currency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Content_Currency) Descriptor() protoreflect.EnumDescriptor {
	return file_content_proto_enumTypes[0].Descriptor()
}

func (Content_Currency) Type() protoreflect.EnumType {
	return &file_content_proto_enumTypes[0]
}

func (x Content_Currency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Content_Currency.Descriptor instead.
func (Content_Currency) EnumDescriptor() ([]byte, []int) {
	return file_content_proto_rawDescGZIP(), []int{0, 0}
}

type ContentDetail_StableDiffusionModel int32

const (
	ContentDetail_V_1_4     ContentDetail_StableDiffusionModel = 0
	ContentDetail_V_1_5     ContentDetail_StableDiffusionModel = 1
	ContentDetail_V_2_0     ContentDetail_StableDiffusionModel = 2
	ContentDetail_V_2_0_768 ContentDetail_StableDiffusionModel = 3
	ContentDetail_V_2_1     ContentDetail_StableDiffusionModel = 4
	ContentDetail_V_2_1_768 ContentDetail_StableDiffusionModel = 5
)

// Enum value maps for ContentDetail_StableDiffusionModel.
var (
	ContentDetail_StableDiffusionModel_name = map[int32]string{
		0: "V_1_4",
		1: "V_1_5",
		2: "V_2_0",
		3: "V_2_0_768",
		4: "V_2_1",
		5: "V_2_1_768",
	}
	ContentDetail_StableDiffusionModel_value = map[string]int32{
		"V_1_4":     0,
		"V_1_5":     1,
		"V_2_0":     2,
		"V_2_0_768": 3,
		"V_2_1":     4,
		"V_2_1_768": 5,
	}
)

func (x ContentDetail_StableDiffusionModel) Enum() *ContentDetail_StableDiffusionModel {
	p := new(ContentDetail_StableDiffusionModel)
	*p = x
	return p
}

func (x ContentDetail_StableDiffusionModel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentDetail_StableDiffusionModel) Descriptor() protoreflect.EnumDescriptor {
	return file_content_proto_enumTypes[1].Descriptor()
}

func (ContentDetail_StableDiffusionModel) Type() protoreflect.EnumType {
	return &file_content_proto_enumTypes[1]
}

func (x ContentDetail_StableDiffusionModel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentDetail_StableDiffusionModel.Descriptor instead.
func (ContentDetail_StableDiffusionModel) EnumDescriptor() ([]byte, []int) {
	return file_content_proto_rawDescGZIP(), []int{2, 0}
}

type ContentDetail_StableDiffusionSampler int32

const (
	ContentDetail_Ddim                 ContentDetail_StableDiffusionSampler = 0
	ContentDetail_Plms                 ContentDetail_StableDiffusionSampler = 1
	ContentDetail_K_euler              ContentDetail_StableDiffusionSampler = 2
	ContentDetail_K_enler_ancestral    ContentDetail_StableDiffusionSampler = 3
	ContentDetail_K_heun               ContentDetail_StableDiffusionSampler = 4
	ContentDetail_K_dpm2               ContentDetail_StableDiffusionSampler = 5
	ContentDetail_K_dpm2_ancestral     ContentDetail_StableDiffusionSampler = 6
	ContentDetail_K_lms                ContentDetail_StableDiffusionSampler = 7
	ContentDetail_K_dpmpp_2s_ancestral ContentDetail_StableDiffusionSampler = 8
	ContentDetail_K_dpmpp_2m           ContentDetail_StableDiffusionSampler = 9
)

// Enum value maps for ContentDetail_StableDiffusionSampler.
var (
	ContentDetail_StableDiffusionSampler_name = map[int32]string{
		0: "Ddim",
		1: "Plms",
		2: "K_euler",
		3: "K_enler_ancestral",
		4: "K_heun",
		5: "K_dpm2",
		6: "K_dpm2_ancestral",
		7: "K_lms",
		8: "K_dpmpp_2s_ancestral",
		9: "K_dpmpp_2m",
	}
	ContentDetail_StableDiffusionSampler_value = map[string]int32{
		"Ddim":                 0,
		"Plms":                 1,
		"K_euler":              2,
		"K_enler_ancestral":    3,
		"K_heun":               4,
		"K_dpm2":               5,
		"K_dpm2_ancestral":     6,
		"K_lms":                7,
		"K_dpmpp_2s_ancestral": 8,
		"K_dpmpp_2m":           9,
	}
)

func (x ContentDetail_StableDiffusionSampler) Enum() *ContentDetail_StableDiffusionSampler {
	p := new(ContentDetail_StableDiffusionSampler)
	*p = x
	return p
}

func (x ContentDetail_StableDiffusionSampler) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentDetail_StableDiffusionSampler) Descriptor() protoreflect.EnumDescriptor {
	return file_content_proto_enumTypes[2].Descriptor()
}

func (ContentDetail_StableDiffusionSampler) Type() protoreflect.EnumType {
	return &file_content_proto_enumTypes[2]
}

func (x ContentDetail_StableDiffusionSampler) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentDetail_StableDiffusionSampler.Descriptor instead.
func (ContentDetail_StableDiffusionSampler) EnumDescriptor() ([]byte, []int) {
	return file_content_proto_rawDescGZIP(), []int{2, 1}
}

type ContentTool_Tool int32

const (
	// https://ascii.jp/elem/000/004/124/4124022/
	ContentTool_TOOL_UNKNOWN     ContentTool_Tool = 0
	ContentTool_ChatGPT          ContentTool_Tool = 1
	ContentTool_GPT_3            ContentTool_Tool = 2
	ContentTool_DALL_E           ContentTool_Tool = 3
	ContentTool_Stable_Diffusion ContentTool_Tool = 4
	ContentTool_Midjourney       ContentTool_Tool = 5
)

// Enum value maps for ContentTool_Tool.
var (
	ContentTool_Tool_name = map[int32]string{
		0: "TOOL_UNKNOWN",
		1: "ChatGPT",
		2: "GPT_3",
		3: "DALL_E",
		4: "Stable_Diffusion",
		5: "Midjourney",
	}
	ContentTool_Tool_value = map[string]int32{
		"TOOL_UNKNOWN":     0,
		"ChatGPT":          1,
		"GPT_3":            2,
		"DALL_E":           3,
		"Stable_Diffusion": 4,
		"Midjourney":       5,
	}
)

func (x ContentTool_Tool) Enum() *ContentTool_Tool {
	p := new(ContentTool_Tool)
	*p = x
	return p
}

func (x ContentTool_Tool) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentTool_Tool) Descriptor() protoreflect.EnumDescriptor {
	return file_content_proto_enumTypes[3].Descriptor()
}

func (ContentTool_Tool) Type() protoreflect.EnumType {
	return &file_content_proto_enumTypes[3]
}

func (x ContentTool_Tool) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentTool_Tool.Descriptor instead.
func (ContentTool_Tool) EnumDescriptor() ([]byte, []int) {
	return file_content_proto_rawDescGZIP(), []int{3, 0}
}

type ContentCategory_Category int32

const (
	ContentCategory_YOUTUBE   ContentCategory_Category = 0
	ContentCategory_TWITTER   ContentCategory_Category = 1
	ContentCategory_INSTAGRAM ContentCategory_Category = 2
	ContentCategory_FACEBOOK  ContentCategory_Category = 3
	ContentCategory_LINKEDIN  ContentCategory_Category = 4
	ContentCategory_TIKTOK    ContentCategory_Category = 5
	ContentCategory_PINTEREST ContentCategory_Category = 6
	ContentCategory_REDDIT    ContentCategory_Category = 7
	ContentCategory_SNAPCHAT  ContentCategory_Category = 8
	ContentCategory_TUMBLR    ContentCategory_Category = 9
	ContentCategory_TWITCH    ContentCategory_Category = 10
	ContentCategory_WEIBO     ContentCategory_Category = 11
	ContentCategory_WECHAT    ContentCategory_Category = 12
	ContentCategory_WHATSAPP  ContentCategory_Category = 13
	ContentCategory_LINE      ContentCategory_Category = 14
	ContentCategory_TELEGRAM  ContentCategory_Category = 15
	ContentCategory_VK        ContentCategory_Category = 16
	ContentCategory_YAHOO     ContentCategory_Category = 17
	ContentCategory_OTHER     ContentCategory_Category = 18
)

// Enum value maps for ContentCategory_Category.
var (
	ContentCategory_Category_name = map[int32]string{
		0:  "YOUTUBE",
		1:  "TWITTER",
		2:  "INSTAGRAM",
		3:  "FACEBOOK",
		4:  "LINKEDIN",
		5:  "TIKTOK",
		6:  "PINTEREST",
		7:  "REDDIT",
		8:  "SNAPCHAT",
		9:  "TUMBLR",
		10: "TWITCH",
		11: "WEIBO",
		12: "WECHAT",
		13: "WHATSAPP",
		14: "LINE",
		15: "TELEGRAM",
		16: "VK",
		17: "YAHOO",
		18: "OTHER",
	}
	ContentCategory_Category_value = map[string]int32{
		"YOUTUBE":   0,
		"TWITTER":   1,
		"INSTAGRAM": 2,
		"FACEBOOK":  3,
		"LINKEDIN":  4,
		"TIKTOK":    5,
		"PINTEREST": 6,
		"REDDIT":    7,
		"SNAPCHAT":  8,
		"TUMBLR":    9,
		"TWITCH":    10,
		"WEIBO":     11,
		"WECHAT":    12,
		"WHATSAPP":  13,
		"LINE":      14,
		"TELEGRAM":  15,
		"VK":        16,
		"YAHOO":     17,
		"OTHER":     18,
	}
)

func (x ContentCategory_Category) Enum() *ContentCategory_Category {
	p := new(ContentCategory_Category)
	*p = x
	return p
}

func (x ContentCategory_Category) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentCategory_Category) Descriptor() protoreflect.EnumDescriptor {
	return file_content_proto_enumTypes[4].Descriptor()
}

func (ContentCategory_Category) Type() protoreflect.EnumType {
	return &file_content_proto_enumTypes[4]
}

func (x ContentCategory_Category) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentCategory_Category.Descriptor instead.
func (ContentCategory_Category) EnumDescriptor() ([]byte, []int) {
	return file_content_proto_rawDescGZIP(), []int{4, 0}
}

type ContentSubCategory_SubCategory int32

const (
	ContentSubCategory_YOUTUBE   ContentSubCategory_SubCategory = 0
	ContentSubCategory_TWITTER   ContentSubCategory_SubCategory = 1
	ContentSubCategory_INSTAGRAM ContentSubCategory_SubCategory = 2
	ContentSubCategory_FACEBOOK  ContentSubCategory_SubCategory = 3
	ContentSubCategory_LINKEDIN  ContentSubCategory_SubCategory = 4
	ContentSubCategory_TIKTOK    ContentSubCategory_SubCategory = 5
	ContentSubCategory_PINTEREST ContentSubCategory_SubCategory = 6
	ContentSubCategory_REDDIT    ContentSubCategory_SubCategory = 7
	ContentSubCategory_SNAPCHAT  ContentSubCategory_SubCategory = 8
	ContentSubCategory_TUMBLR    ContentSubCategory_SubCategory = 9
	ContentSubCategory_TWITCH    ContentSubCategory_SubCategory = 10
	ContentSubCategory_WEIBO     ContentSubCategory_SubCategory = 11
	ContentSubCategory_WECHAT    ContentSubCategory_SubCategory = 12
	ContentSubCategory_WHATSAPP  ContentSubCategory_SubCategory = 13
	ContentSubCategory_LINE      ContentSubCategory_SubCategory = 14
	ContentSubCategory_TELEGRAM  ContentSubCategory_SubCategory = 15
	ContentSubCategory_VK        ContentSubCategory_SubCategory = 16
	ContentSubCategory_YAHOO     ContentSubCategory_SubCategory = 17
	ContentSubCategory_OTHER     ContentSubCategory_SubCategory = 18
)

// Enum value maps for ContentSubCategory_SubCategory.
var (
	ContentSubCategory_SubCategory_name = map[int32]string{
		0:  "YOUTUBE",
		1:  "TWITTER",
		2:  "INSTAGRAM",
		3:  "FACEBOOK",
		4:  "LINKEDIN",
		5:  "TIKTOK",
		6:  "PINTEREST",
		7:  "REDDIT",
		8:  "SNAPCHAT",
		9:  "TUMBLR",
		10: "TWITCH",
		11: "WEIBO",
		12: "WECHAT",
		13: "WHATSAPP",
		14: "LINE",
		15: "TELEGRAM",
		16: "VK",
		17: "YAHOO",
		18: "OTHER",
	}
	ContentSubCategory_SubCategory_value = map[string]int32{
		"YOUTUBE":   0,
		"TWITTER":   1,
		"INSTAGRAM": 2,
		"FACEBOOK":  3,
		"LINKEDIN":  4,
		"TIKTOK":    5,
		"PINTEREST": 6,
		"REDDIT":    7,
		"SNAPCHAT":  8,
		"TUMBLR":    9,
		"TWITCH":    10,
		"WEIBO":     11,
		"WECHAT":    12,
		"WHATSAPP":  13,
		"LINE":      14,
		"TELEGRAM":  15,
		"VK":        16,
		"YAHOO":     17,
		"OTHER":     18,
	}
)

func (x ContentSubCategory_SubCategory) Enum() *ContentSubCategory_SubCategory {
	p := new(ContentSubCategory_SubCategory)
	*p = x
	return p
}

func (x ContentSubCategory_SubCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentSubCategory_SubCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_content_proto_enumTypes[5].Descriptor()
}

func (ContentSubCategory_SubCategory) Type() protoreflect.EnumType {
	return &file_content_proto_enumTypes[5]
}

func (x ContentSubCategory_SubCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentSubCategory_SubCategory.Descriptor instead.
func (ContentSubCategory_SubCategory) EnumDescriptor() ([]byte, []int) {
	return file_content_proto_rawDescGZIP(), []int{5, 0}
}

type ContentSearchRequest_SortBy int32

const (
	ContentSearchRequest_NEWEST    ContentSearchRequest_SortBy = 0
	ContentSearchRequest_HOTTEST   ContentSearchRequest_SortBy = 1
	ContentSearchRequest_TOP       ContentSearchRequest_SortBy = 2
	ContentSearchRequest_RECCOMEND ContentSearchRequest_SortBy = 3
)

// Enum value maps for ContentSearchRequest_SortBy.
var (
	ContentSearchRequest_SortBy_name = map[int32]string{
		0: "NEWEST",
		1: "HOTTEST",
		2: "TOP",
		3: "RECCOMEND",
	}
	ContentSearchRequest_SortBy_value = map[string]int32{
		"NEWEST":    0,
		"HOTTEST":   1,
		"TOP":       2,
		"RECCOMEND": 3,
	}
)

func (x ContentSearchRequest_SortBy) Enum() *ContentSearchRequest_SortBy {
	p := new(ContentSearchRequest_SortBy)
	*p = x
	return p
}

func (x ContentSearchRequest_SortBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentSearchRequest_SortBy) Descriptor() protoreflect.EnumDescriptor {
	return file_content_proto_enumTypes[6].Descriptor()
}

func (ContentSearchRequest_SortBy) Type() protoreflect.EnumType {
	return &file_content_proto_enumTypes[6]
}

func (x ContentSearchRequest_SortBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentSearchRequest_SortBy.Descriptor instead.
func (ContentSearchRequest_SortBy) EnumDescriptor() ([]byte, []int) {
	return file_content_proto_rawDescGZIP(), []int{14, 0}
}

// ユーザー情報を表すメッセージ型
type Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid            string                `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	UserId          int64                 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Title           string                `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Description     string                `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Thumbnail       string                `protobuf:"bytes,6,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	Price           int64                 `protobuf:"varint,8,opt,name=price,proto3" json:"price,omitempty"`
	AspRate         int64                 `protobuf:"varint,9,opt,name=asp_rate,json=aspRate,proto3" json:"asp_rate,omitempty"`                          // aspの料率
	RequestProgress bool                  `protobuf:"varint,11,opt,name=request_progress,json=requestProgress,proto3" json:"request_progress,omitempty"` //コンテンツの審査
	IsOpen          bool                  `protobuf:"varint,12,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`                            //下書き false:下書き true:公開
	CreatedAt       string                `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       string                `protobuf:"bytes,14,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	IsDeleted       bool                  `protobuf:"varint,15,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	Details         []*ContentDetail      `protobuf:"bytes,16,rep,name=details,proto3" json:"details,omitempty"`
	Tools           []*ContentTool        `protobuf:"bytes,17,rep,name=tools,proto3" json:"tools,omitempty"`
	Categories      []*ContentCategory    `protobuf:"bytes,18,rep,name=categories,proto3" json:"categories,omitempty"`
	SubCategories   []*ContentSubCategory `protobuf:"bytes,19,rep,name=sub_categories,json=subCategories,proto3" json:"sub_categories,omitempty"`
	Previews        []*ContentPreview     `protobuf:"bytes,20,rep,name=previews,proto3" json:"previews,omitempty"`
	// not in db
	LikeCount       int64            `protobuf:"varint,21,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty"`
	ImpressionCount int64            `protobuf:"varint,22,opt,name=impression_count,json=impressionCount,proto3" json:"impression_count,omitempty"`
	ViewCount       int64            `protobuf:"varint,23,opt,name=view_count,json=viewCount,proto3" json:"view_count,omitempty"`
	ClickCount      int64            `protobuf:"varint,24,opt,name=click_count,json=clickCount,proto3" json:"click_count,omitempty"`
	OrderCount      int64            `protobuf:"varint,25,opt,name=order_count,json=orderCount,proto3" json:"order_count,omitempty"`
	PurchaseCount   int64            `protobuf:"varint,26,opt,name=purchase_count,json=purchaseCount,proto3" json:"purchase_count,omitempty"`
	ReviewCount     int64            `protobuf:"varint,27,opt,name=review_count,json=reviewCount,proto3" json:"review_count,omitempty"`
	ShareCount      int64            `protobuf:"varint,28,opt,name=share_count,json=shareCount,proto3" json:"share_count,omitempty"`
	AspCount        int64            `protobuf:"varint,29,opt,name=asp_count,json=aspCount,proto3" json:"asp_count,omitempty"`
	Currency        Content_Currency `protobuf:"varint,30,opt,name=currency,proto3,enum=content.Content_Currency" json:"currency,omitempty"`
	StarRate        int64            `protobuf:"varint,31,opt,name=star_rate,json=starRate,proto3" json:"star_rate,omitempty"`
	// not in db
	UserName        int64 `protobuf:"varint,32,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	UserIcon        int64 `protobuf:"varint,33,opt,name=user_icon,json=userIcon,proto3" json:"user_icon,omitempty"`
	UserDescription int64 `protobuf:"varint,34,opt,name=user_description,json=userDescription,proto3" json:"user_description,omitempty"`
	IsLiked         bool  `protobuf:"varint,35,opt,name=is_liked,json=isLiked,proto3" json:"is_liked,omitempty"`
	IsPurchased     bool  `protobuf:"varint,36,opt,name=is_purchased,json=isPurchased,proto3" json:"is_purchased,omitempty"`
}

func (x *Content) Reset() {
	*x = Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Content) ProtoMessage() {}

func (x *Content) ProtoReflect() protoreflect.Message {
	mi := &file_content_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Content.ProtoReflect.Descriptor instead.
func (*Content) Descriptor() ([]byte, []int) {
	return file_content_proto_rawDescGZIP(), []int{0}
}

func (x *Content) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Content) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Content) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Content) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Content) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Content) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *Content) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Content) GetAspRate() int64 {
	if x != nil {
		return x.AspRate
	}
	return 0
}

func (x *Content) GetRequestProgress() bool {
	if x != nil {
		return x.RequestProgress
	}
	return false
}

func (x *Content) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *Content) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Content) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Content) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *Content) GetDetails() []*ContentDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *Content) GetTools() []*ContentTool {
	if x != nil {
		return x.Tools
	}
	return nil
}

func (x *Content) GetCategories() []*ContentCategory {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *Content) GetSubCategories() []*ContentSubCategory {
	if x != nil {
		return x.SubCategories
	}
	return nil
}

func (x *Content) GetPreviews() []*ContentPreview {
	if x != nil {
		return x.Previews
	}
	return nil
}

func (x *Content) GetLikeCount() int64 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *Content) GetImpressionCount() int64 {
	if x != nil {
		return x.ImpressionCount
	}
	return 0
}

func (x *Content) GetViewCount() int64 {
	if x != nil {
		return x.ViewCount
	}
	return 0
}

func (x *Content) GetClickCount() int64 {
	if x != nil {
		return x.ClickCount
	}
	return 0
}

func (x *Content) GetOrderCount() int64 {
	if x != nil {
		return x.OrderCount
	}
	return 0
}

func (x *Content) GetPurchaseCount() int64 {
	if x != nil {
		return x.PurchaseCount
	}
	return 0
}

func (x *Content) GetReviewCount() int64 {
	if x != nil {
		return x.ReviewCount
	}
	return 0
}

func (x *Content) GetShareCount() int64 {
	if x != nil {
		return x.ShareCount
	}
	return 0
}

func (x *Content) GetAspCount() int64 {
	if x != nil {
		return x.AspCount
	}
	return 0
}

func (x *Content) GetCurrency() Content_Currency {
	if x != nil {
		return x.Currency
	}
	return Content_USD
}

func (x *Content) GetStarRate() int64 {
	if x != nil {
		return x.StarRate
	}
	return 0
}

func (x *Content) GetUserName() int64 {
	if x != nil {
		return x.UserName
	}
	return 0
}

func (x *Content) GetUserIcon() int64 {
	if x != nil {
		return x.UserIcon
	}
	return 0
}

func (x *Content) GetUserDescription() int64 {
	if x != nil {
		return x.UserDescription
	}
	return 0
}

func (x *Content) GetIsLiked() bool {
	if x != nil {
		return x.IsLiked
	}
	return false
}

func (x *Content) GetIsPurchased() bool {
	if x != nil {
		return x.IsPurchased
	}
	return false
}

type ContentPreview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid          string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ContentId     int64  `protobuf:"varint,3,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	PreviewInput  string `protobuf:"bytes,4,opt,name=preview_input,json=previewInput,proto3" json:"preview_input,omitempty"`
	PreviewOutput string `protobuf:"bytes,5,opt,name=preview_output,json=previewOutput,proto3" json:"preview_output,omitempty"`
	CreatedAt     string `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     string `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ContentPreview) Reset() {
	*x = ContentPreview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentPreview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentPreview) ProtoMessage() {}

func (x *ContentPreview) ProtoReflect() protoreflect.Message {
	mi := &file_content_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentPreview.ProtoReflect.Descriptor instead.
func (*ContentPreview) Descriptor() ([]byte, []int) {
	return file_content_proto_rawDescGZIP(), []int{1}
}

func (x *ContentPreview) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ContentPreview) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ContentPreview) GetContentId() int64 {
	if x != nil {
		return x.ContentId
	}
	return 0
}

func (x *ContentPreview) GetPreviewInput() string {
	if x != nil {
		return x.PreviewInput
	}
	return ""
}

func (x *ContentPreview) GetPreviewOutput() string {
	if x != nil {
		return x.PreviewOutput
	}
	return ""
}

func (x *ContentPreview) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ContentPreview) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type ContentDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid              string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ContentId         int64  `protobuf:"varint,3,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	Prompt            string `protobuf:"bytes,6,opt,name=prompt,proto3" json:"prompt,omitempty"`
	TestingPrompt     string `protobuf:"bytes,7,opt,name=testing_prompt,json=testingPrompt,proto3" json:"testing_prompt,omitempty"`
	Engine            int64  `protobuf:"varint,9,opt,name=engine,proto3" json:"engine,omitempty"` // 1: gpt-3.5-turbo, 2: gpt-4
	PromptInstruction string `protobuf:"bytes,10,opt,name=prompt_instruction,json=promptInstruction,proto3" json:"prompt_instruction,omitempty"`
	Url               string `protobuf:"bytes,11,opt,name=url,proto3" json:"url,omitempty"`
	CreatedAt         string `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         string `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	IsDeleted         bool   `protobuf:"varint,14,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	// stable diffusion
	StableDiffusionModel   ContentDetail_StableDiffusionModel   `protobuf:"varint,100,opt,name=stable_diffusion_model,json=stableDiffusionModel,proto3,enum=content.ContentDetail_StableDiffusionModel" json:"stable_diffusion_model,omitempty"`         // 1: v.1.4, 2: v.1.5, 3: v.2.0, 4: v.2.0.768, 5: v.2.1, 6: v.2.1.768
	StableDiffusionSampler ContentDetail_StableDiffusionSampler `protobuf:"varint,101,opt,name=stable_diffusion_sampler,json=stableDiffusionSampler,proto3,enum=content.ContentDetail_StableDiffusionSampler" json:"stable_diffusion_sampler,omitempty"` // 1: ddim, 2: plms, 3: k_euler, 4: k_enler_ancestral, 5: k_heun,
	ImageWidth             int64                                `protobuf:"varint,102,opt,name=image_width,json=imageWidth,proto3" json:"image_width,omitempty"`
	ImageHeight            int64                                `protobuf:"varint,103,opt,name=image_height,json=imageHeight,proto3" json:"image_height,omitempty"`
	CfgScale               int64                                `protobuf:"varint,104,opt,name=cfg_scale,json=cfgScale,proto3" json:"cfg_scale,omitempty"`
	Steps                  int64                                `protobuf:"varint,105,opt,name=steps,proto3" json:"steps,omitempty"`
	Seed                   string                               `protobuf:"bytes,106,opt,name=seed,proto3" json:"seed,omitempty"`
	ClipGuidance           bool                                 `protobuf:"varint,107,opt,name=clip_guidance,json=clipGuidance,proto3" json:"clip_guidance,omitempty"`
	NagativePrompt         string                               `protobuf:"bytes,108,opt,name=nagative_prompt,json=nagativePrompt,proto3" json:"nagative_prompt,omitempty"`
	Title                  string                               `protobuf:"bytes,109,opt,name=title,proto3" json:"title,omitempty"`
	Description            string                               `protobuf:"bytes,110,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *ContentDetail) Reset() {
	*x = ContentDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentDetail) ProtoMessage() {}

func (x *ContentDetail) ProtoReflect() protoreflect.Message {
	mi := &file_content_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentDetail.ProtoReflect.Descriptor instead.
func (*ContentDetail) Descriptor() ([]byte, []int) {
	return file_content_proto_rawDescGZIP(), []int{2}
}

func (x *ContentDetail) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ContentDetail) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ContentDetail) GetContentId() int64 {
	if x != nil {
		return x.ContentId
	}
	return 0
}

func (x *ContentDetail) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

func (x *ContentDetail) GetTestingPrompt() string {
	if x != nil {
		return x.TestingPrompt
	}
	return ""
}

func (x *ContentDetail) GetEngine() int64 {
	if x != nil {
		return x.Engine
	}
	return 0
}

func (x *ContentDetail) GetPromptInstruction() string {
	if x != nil {
		return x.PromptInstruction
	}
	return ""
}

func (x *ContentDetail) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ContentDetail) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ContentDetail) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *ContentDetail) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *ContentDetail) GetStableDiffusionModel() ContentDetail_StableDiffusionModel {
	if x != nil {
		return x.StableDiffusionModel
	}
	return ContentDetail_V_1_4
}

func (x *ContentDetail) GetStableDiffusionSampler() ContentDetail_StableDiffusionSampler {
	if x != nil {
		return x.StableDiffusionSampler
	}
	return ContentDetail_Ddim
}

func (x *ContentDetail) GetImageWidth() int64 {
	if x != nil {
		return x.ImageWidth
	}
	return 0
}

func (x *ContentDetail) GetImageHeight() int64 {
	if x != nil {
		return x.ImageHeight
	}
	return 0
}

func (x *ContentDetail) GetCfgScale() int64 {
	if x != nil {
		return x.CfgScale
	}
	return 0
}

func (x *ContentDetail) GetSteps() int64 {
	if x != nil {
		return x.Steps
	}
	return 0
}

func (x *ContentDetail) GetSeed() string {
	if x != nil {
		return x.Seed
	}
	return ""
}

func (x *ContentDetail) GetClipGuidance() bool {
	if x != nil {
		return x.ClipGuidance
	}
	return false
}

func (x *ContentDetail) GetNagativePrompt() string {
	if x != nil {
		return x.NagativePrompt
	}
	return ""
}

func (x *ContentDetail) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ContentDetail) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// service
type ContentTool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid      string           `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ContentId int64            `protobuf:"varint,3,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	Tool      ContentTool_Tool `protobuf:"varint,5,opt,name=tool,proto3,enum=content.ContentTool_Tool" json:"tool,omitempty"`
	CreatedAt string           `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt string           `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ContentTool) Reset() {
	*x = ContentTool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentTool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentTool) ProtoMessage() {}

func (x *ContentTool) ProtoReflect() protoreflect.Message {
	mi := &file_content_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentTool.ProtoReflect.Descriptor instead.
func (*ContentTool) Descriptor() ([]byte, []int) {
	return file_content_proto_rawDescGZIP(), []int{3}
}

func (x *ContentTool) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ContentTool) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ContentTool) GetContentId() int64 {
	if x != nil {
		return x.ContentId
	}
	return 0
}

func (x *ContentTool) GetTool() ContentTool_Tool {
	if x != nil {
		return x.Tool
	}
	return ContentTool_TOOL_UNKNOWN
}

func (x *ContentTool) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ContentTool) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type ContentCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid      string                   `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ContentId int64                    `protobuf:"varint,3,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	Category  ContentCategory_Category `protobuf:"varint,5,opt,name=category,proto3,enum=content.ContentCategory_Category" json:"category,omitempty"`
	CreatedAt string                   `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt string                   `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ContentCategory) Reset() {
	*x = ContentCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentCategory) ProtoMessage() {}

func (x *ContentCategory) ProtoReflect() protoreflect.Message {
	mi := &file_content_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentCategory.ProtoReflect.Descriptor instead.
func (*ContentCategory) Descriptor() ([]byte, []int) {
	return file_content_proto_rawDescGZIP(), []int{4}
}

func (x *ContentCategory) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ContentCategory) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ContentCategory) GetContentId() int64 {
	if x != nil {
		return x.ContentId
	}
	return 0
}

func (x *ContentCategory) GetCategory() ContentCategory_Category {
	if x != nil {
		return x.Category
	}
	return ContentCategory_YOUTUBE
}

func (x *ContentCategory) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ContentCategory) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// ユーザー情報を表すメッセージ型
type ContentSubCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid        string                         `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ContentId   int64                          `protobuf:"varint,3,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	SubCategory ContentSubCategory_SubCategory `protobuf:"varint,5,opt,name=sub_category,json=subCategory,proto3,enum=content.ContentSubCategory_SubCategory" json:"sub_category,omitempty"`
	CreatedAt   string                         `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   string                         `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ContentSubCategory) Reset() {
	*x = ContentSubCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentSubCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentSubCategory) ProtoMessage() {}

func (x *ContentSubCategory) ProtoReflect() protoreflect.Message {
	mi := &file_content_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentSubCategory.ProtoReflect.Descriptor instead.
func (*ContentSubCategory) Descriptor() ([]byte, []int) {
	return file_content_proto_rawDescGZIP(), []int{5}
}

func (x *ContentSubCategory) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ContentSubCategory) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ContentSubCategory) GetContentId() int64 {
	if x != nil {
		return x.ContentId
	}
	return 0
}

func (x *ContentSubCategory) GetSubCategory() ContentSubCategory_SubCategory {
	if x != nil {
		return x.SubCategory
	}
	return ContentSubCategory_YOUTUBE
}

func (x *ContentSubCategory) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ContentSubCategory) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type ContentList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content []*Content `protobuf:"bytes,1,rep,name=content,proto3" json:"content,omitempty"`
}

func (x *ContentList) Reset() {
	*x = ContentList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentList) ProtoMessage() {}

func (x *ContentList) ProtoReflect() protoreflect.Message {
	mi := &file_content_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentList.ProtoReflect.Descriptor instead.
func (*ContentList) Descriptor() ([]byte, []int) {
	return file_content_proto_rawDescGZIP(), []int{6}
}

func (x *ContentList) GetContent() []*Content {
	if x != nil {
		return x.Content
	}
	return nil
}

// request
type ContentIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ContentIdRequest) Reset() {
	*x = ContentIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentIdRequest) ProtoMessage() {}

func (x *ContentIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentIdRequest.ProtoReflect.Descriptor instead.
func (*ContentIdRequest) Descriptor() ([]byte, []int) {
	return file_content_proto_rawDescGZIP(), []int{7}
}

func (x *ContentIdRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// request
type ContentIdAndUserIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ContentIdAndUserIdRequest) Reset() {
	*x = ContentIdAndUserIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentIdAndUserIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentIdAndUserIdRequest) ProtoMessage() {}

func (x *ContentIdAndUserIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentIdAndUserIdRequest.ProtoReflect.Descriptor instead.
func (*ContentIdAndUserIdRequest) Descriptor() ([]byte, []int) {
	return file_content_proto_rawDescGZIP(), []int{8}
}

func (x *ContentIdAndUserIdRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ContentIdAndUserIdRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type ContentUuidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *ContentUuidRequest) Reset() {
	*x = ContentUuidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentUuidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentUuidRequest) ProtoMessage() {}

func (x *ContentUuidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentUuidRequest.ProtoReflect.Descriptor instead.
func (*ContentUuidRequest) Descriptor() ([]byte, []int) {
	return file_content_proto_rawDescGZIP(), []int{9}
}

func (x *ContentUuidRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

// request
type ContentUuidAndUserIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid   string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	UserId int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ContentUuidAndUserIdRequest) Reset() {
	*x = ContentUuidAndUserIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentUuidAndUserIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentUuidAndUserIdRequest) ProtoMessage() {}

func (x *ContentUuidAndUserIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentUuidAndUserIdRequest.ProtoReflect.Descriptor instead.
func (*ContentUuidAndUserIdRequest) Descriptor() ([]byte, []int) {
	return file_content_proto_rawDescGZIP(), []int{10}
}

func (x *ContentUuidAndUserIdRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ContentUuidAndUserIdRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type ContentIdListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []int64 `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (x *ContentIdListRequest) Reset() {
	*x = ContentIdListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentIdListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentIdListRequest) ProtoMessage() {}

func (x *ContentIdListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentIdListRequest.ProtoReflect.Descriptor instead.
func (*ContentIdListRequest) Descriptor() ([]byte, []int) {
	return file_content_proto_rawDescGZIP(), []int{11}
}

func (x *ContentIdListRequest) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

type ContentUserIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ContentUserIdRequest) Reset() {
	*x = ContentUserIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentUserIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentUserIdRequest) ProtoMessage() {}

func (x *ContentUserIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentUserIdRequest.ProtoReflect.Descriptor instead.
func (*ContentUserIdRequest) Descriptor() ([]byte, []int) {
	return file_content_proto_rawDescGZIP(), []int{12}
}

func (x *ContentUserIdRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// response
type ContentBoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error bool `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ContentBoolResponse) Reset() {
	*x = ContentBoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentBoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentBoolResponse) ProtoMessage() {}

func (x *ContentBoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentBoolResponse.ProtoReflect.Descriptor instead.
func (*ContentBoolResponse) Descriptor() ([]byte, []int) {
	return file_content_proto_rawDescGZIP(), []int{13}
}

func (x *ContentBoolResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

type ContentSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int64                            `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Keyword     string                           `protobuf:"bytes,2,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Tool        []ContentTool_Tool               `protobuf:"varint,3,rep,packed,name=tool,proto3,enum=content.ContentTool_Tool" json:"tool,omitempty"`
	Category    []ContentCategory_Category       `protobuf:"varint,4,rep,packed,name=category,proto3,enum=content.ContentCategory_Category" json:"category,omitempty"`
	SubCategory []ContentSubCategory_SubCategory `protobuf:"varint,5,rep,packed,name=sub_category,json=subCategory,proto3,enum=content.ContentSubCategory_SubCategory" json:"sub_category,omitempty"`
	SortBy      ContentSearchRequest_SortBy      `protobuf:"varint,6,opt,name=sort_by,json=sortBy,proto3,enum=content.ContentSearchRequest_SortBy" json:"sort_by,omitempty"`
}

func (x *ContentSearchRequest) Reset() {
	*x = ContentSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentSearchRequest) ProtoMessage() {}

func (x *ContentSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentSearchRequest.ProtoReflect.Descriptor instead.
func (*ContentSearchRequest) Descriptor() ([]byte, []int) {
	return file_content_proto_rawDescGZIP(), []int{14}
}

func (x *ContentSearchRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ContentSearchRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ContentSearchRequest) GetTool() []ContentTool_Tool {
	if x != nil {
		return x.Tool
	}
	return nil
}

func (x *ContentSearchRequest) GetCategory() []ContentCategory_Category {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *ContentSearchRequest) GetSubCategory() []ContentSubCategory_SubCategory {
	if x != nil {
		return x.SubCategory
	}
	return nil
}

func (x *ContentSearchRequest) GetSortBy() ContentSearchRequest_SortBy {
	if x != nil {
		return x.SortBy
	}
	return ContentSearchRequest_NEWEST
}

var File_content_proto protoreflect.FileDescriptor

var file_content_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd9, 0x09, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73,
	0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x73,
	0x70, 0x52, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x74, 0x6f, 0x6f, 0x6c,
	0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x74,
	0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x42,
	0x0a, 0x0e, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x08, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x69, 0x6b,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x73, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x61, 0x73, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x64, 0x22, 0x2e, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x07, 0x0a,
	0x03, 0x55, 0x53, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x50, 0x59, 0x10, 0x01, 0x12,
	0x07, 0x0a, 0x03, 0x45, 0x55, 0x52, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x42, 0x50, 0x10,
	0x03, 0x22, 0xdd, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0xbc, 0x08, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x6d, 0x70,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x61, 0x0a, 0x16, 0x73,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x66, 0x66, 0x75, 0x73,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x14, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x69, 0x66, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x67,
	0x0a, 0x18, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x75, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x69, 0x66, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52,
	0x16, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x66, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x66, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x66, 0x67, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x63, 0x66, 0x67, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70,
	0x73, 0x18, 0x69, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x65,
	0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x70, 0x47,
	0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x61, 0x67, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6e, 0x61, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x60, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x69, 0x66, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x09, 0x0a, 0x05, 0x56, 0x5f, 0x31, 0x5f, 0x34, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x56,
	0x5f, 0x31, 0x5f, 0x35, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x5f, 0x32, 0x5f, 0x30, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x5f, 0x32, 0x5f, 0x30, 0x5f, 0x37, 0x36, 0x38, 0x10, 0x03,
	0x12, 0x09, 0x0a, 0x05, 0x56, 0x5f, 0x32, 0x5f, 0x31, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x56,
	0x5f, 0x32, 0x5f, 0x31, 0x5f, 0x37, 0x36, 0x38, 0x10, 0x05, 0x22, 0xb3, 0x01, 0x0a, 0x16, 0x53,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x66, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x64, 0x69, 0x6d, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x50, 0x6c, 0x6d, 0x73, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x5f, 0x65,
	0x75, 0x6c, 0x65, 0x72, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4b, 0x5f, 0x65, 0x6e, 0x6c, 0x65,
	0x72, 0x5f, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x72, 0x61, 0x6c, 0x10, 0x03, 0x12, 0x0a, 0x0a,
	0x06, 0x4b, 0x5f, 0x68, 0x65, 0x75, 0x6e, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x5f, 0x64,
	0x70, 0x6d, 0x32, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x4b, 0x5f, 0x64, 0x70, 0x6d, 0x32, 0x5f,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x72, 0x61, 0x6c, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x4b,
	0x5f, 0x6c, 0x6d, 0x73, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x4b, 0x5f, 0x64, 0x70, 0x6d, 0x70,
	0x70, 0x5f, 0x32, 0x73, 0x5f, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x72, 0x61, 0x6c, 0x10, 0x08,
	0x12, 0x0e, 0x0a, 0x0a, 0x4b, 0x5f, 0x64, 0x70, 0x6d, 0x70, 0x70, 0x5f, 0x32, 0x6d, 0x10, 0x09,
	0x22, 0xa1, 0x02, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6f, 0x6c,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x6f, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x74, 0x6f,
	0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0x62, 0x0a, 0x04, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x4f, 0x4f, 0x4c,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x68,
	0x61, 0x74, 0x47, 0x50, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x50, 0x54, 0x5f, 0x33,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x10, 0x03, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x44, 0x69, 0x66, 0x66, 0x75, 0x73, 0x69,
	0x6f, 0x6e, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x6a, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x10, 0x05, 0x22, 0xcb, 0x03, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xf7, 0x01, 0x0a, 0x08, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x59, 0x4f, 0x55, 0x54, 0x55, 0x42, 0x45,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x57, 0x49, 0x54, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x46, 0x41, 0x43, 0x45, 0x42, 0x4f, 0x4f, 0x4b, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08,
	0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x44, 0x49, 0x4e, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x49,
	0x4b, 0x54, 0x4f, 0x4b, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x45, 0x53, 0x54, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x44, 0x44, 0x49, 0x54, 0x10,
	0x07, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4e, 0x41, 0x50, 0x43, 0x48, 0x41, 0x54, 0x10, 0x08, 0x12,
	0x0a, 0x0a, 0x06, 0x54, 0x55, 0x4d, 0x42, 0x4c, 0x52, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x54,
	0x57, 0x49, 0x54, 0x43, 0x48, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x45, 0x49, 0x42, 0x4f,
	0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x45, 0x43, 0x48, 0x41, 0x54, 0x10, 0x0c, 0x12, 0x0c,
	0x0a, 0x08, 0x57, 0x48, 0x41, 0x54, 0x53, 0x41, 0x50, 0x50, 0x10, 0x0d, 0x12, 0x08, 0x0a, 0x04,
	0x4c, 0x49, 0x4e, 0x45, 0x10, 0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x45, 0x4c, 0x45, 0x47, 0x52,
	0x41, 0x4d, 0x10, 0x0f, 0x12, 0x06, 0x0a, 0x02, 0x56, 0x4b, 0x10, 0x10, 0x12, 0x09, 0x0a, 0x05,
	0x59, 0x41, 0x48, 0x4f, 0x4f, 0x10, 0x11, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x12, 0x22, 0xde, 0x03, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x75,
	0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0c,
	0x73, 0x75, 0x62, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e,
	0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x75, 0x62,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xfa, 0x01, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x59, 0x4f, 0x55, 0x54, 0x55, 0x42,
	0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x57, 0x49, 0x54, 0x54, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x46, 0x41, 0x43, 0x45, 0x42, 0x4f, 0x4f, 0x4b, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x44, 0x49, 0x4e, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x54,
	0x49, 0x4b, 0x54, 0x4f, 0x4b, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x45, 0x53, 0x54, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x44, 0x44, 0x49, 0x54,
	0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4e, 0x41, 0x50, 0x43, 0x48, 0x41, 0x54, 0x10, 0x08,
	0x12, 0x0a, 0x0a, 0x06, 0x54, 0x55, 0x4d, 0x42, 0x4c, 0x52, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06,
	0x54, 0x57, 0x49, 0x54, 0x43, 0x48, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x45, 0x49, 0x42,
	0x4f, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x45, 0x43, 0x48, 0x41, 0x54, 0x10, 0x0c, 0x12,
	0x0c, 0x0a, 0x08, 0x57, 0x48, 0x41, 0x54, 0x53, 0x41, 0x50, 0x50, 0x10, 0x0d, 0x12, 0x08, 0x0a,
	0x04, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x45, 0x4c, 0x45, 0x47,
	0x52, 0x41, 0x4d, 0x10, 0x0f, 0x12, 0x06, 0x0a, 0x02, 0x56, 0x4b, 0x10, 0x10, 0x12, 0x09, 0x0a,
	0x05, 0x59, 0x41, 0x48, 0x4f, 0x4f, 0x10, 0x11, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x12, 0x22, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x22,
	0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x44, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x41,
	0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x28, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x22, 0x4a, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x26,
	0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2f, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0xfd, 0x02, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x2d, 0x0a, 0x04, 0x74, 0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x6f, 0x6c, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x74, 0x6f, 0x6f, 0x6c, 0x12,
	0x3d, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x4a,
	0x0a, 0x0c, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x2e, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0b, 0x73,
	0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x3d, 0x0a, 0x07, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42,
	0x79, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x22, 0x39, 0x0a, 0x06, 0x53, 0x6f, 0x72,
	0x74, 0x42, 0x79, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x57, 0x45, 0x53, 0x54, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x48, 0x4f, 0x54, 0x54, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x54, 0x4f, 0x50, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x43, 0x43, 0x4f, 0x4d, 0x45,
	0x4e, 0x44, 0x10, 0x03, 0x32, 0x91, 0x0d, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47,
	0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x12, 0x19, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x47, 0x0a, 0x0a, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x79, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0x00, 0x12, 0x4c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x79, 0x55, 0x75, 0x69, 0x64, 0x41,
	0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x41, 0x6e, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x00,
	0x12, 0x46, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1d, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53,
	0x6f, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6b, 0x65,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x00, 0x12, 0x4c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x65, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00,
	0x12, 0x48, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x06, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6b, 0x65, 0x12, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4c, 0x69, 0x6b, 0x65, 0x12, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2e, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_content_proto_rawDescOnce sync.Once
	file_content_proto_rawDescData = file_content_proto_rawDesc
)

func file_content_proto_rawDescGZIP() []byte {
	file_content_proto_rawDescOnce.Do(func() {
		file_content_proto_rawDescData = protoimpl.X.CompressGZIP(file_content_proto_rawDescData)
	})
	return file_content_proto_rawDescData
}

var file_content_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_content_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_content_proto_goTypes = []interface{}{
	(Content_Currency)(0),                     // 0: content.Content.Currency
	(ContentDetail_StableDiffusionModel)(0),   // 1: content.ContentDetail.StableDiffusionModel
	(ContentDetail_StableDiffusionSampler)(0), // 2: content.ContentDetail.StableDiffusionSampler
	(ContentTool_Tool)(0),                     // 3: content.ContentTool.Tool
	(ContentCategory_Category)(0),             // 4: content.ContentCategory.Category
	(ContentSubCategory_SubCategory)(0),       // 5: content.ContentSubCategory.SubCategory
	(ContentSearchRequest_SortBy)(0),          // 6: content.ContentSearchRequest.SortBy
	(*Content)(nil),                           // 7: content.Content
	(*ContentPreview)(nil),                    // 8: content.ContentPreview
	(*ContentDetail)(nil),                     // 9: content.ContentDetail
	(*ContentTool)(nil),                       // 10: content.ContentTool
	(*ContentCategory)(nil),                   // 11: content.ContentCategory
	(*ContentSubCategory)(nil),                // 12: content.ContentSubCategory
	(*ContentList)(nil),                       // 13: content.ContentList
	(*ContentIdRequest)(nil),                  // 14: content.ContentIdRequest
	(*ContentIdAndUserIdRequest)(nil),         // 15: content.ContentIdAndUserIdRequest
	(*ContentUuidRequest)(nil),                // 16: content.ContentUuidRequest
	(*ContentUuidAndUserIdRequest)(nil),       // 17: content.ContentUuidAndUserIdRequest
	(*ContentIdListRequest)(nil),              // 18: content.ContentIdListRequest
	(*ContentUserIdRequest)(nil),              // 19: content.ContentUserIdRequest
	(*ContentBoolResponse)(nil),               // 20: content.ContentBoolResponse
	(*ContentSearchRequest)(nil),              // 21: content.ContentSearchRequest
	(*emptypb.Empty)(nil),                     // 22: google.protobuf.Empty
}
var file_content_proto_depIdxs = []int32{
	9,  // 0: content.Content.details:type_name -> content.ContentDetail
	10, // 1: content.Content.tools:type_name -> content.ContentTool
	11, // 2: content.Content.categories:type_name -> content.ContentCategory
	12, // 3: content.Content.sub_categories:type_name -> content.ContentSubCategory
	8,  // 4: content.Content.previews:type_name -> content.ContentPreview
	0,  // 5: content.Content.currency:type_name -> content.Content.Currency
	1,  // 6: content.ContentDetail.stable_diffusion_model:type_name -> content.ContentDetail.StableDiffusionModel
	2,  // 7: content.ContentDetail.stable_diffusion_sampler:type_name -> content.ContentDetail.StableDiffusionSampler
	3,  // 8: content.ContentTool.tool:type_name -> content.ContentTool.Tool
	4,  // 9: content.ContentCategory.category:type_name -> content.ContentCategory.Category
	5,  // 10: content.ContentSubCategory.sub_category:type_name -> content.ContentSubCategory.SubCategory
	7,  // 11: content.ContentList.content:type_name -> content.Content
	3,  // 12: content.ContentSearchRequest.tool:type_name -> content.ContentTool.Tool
	4,  // 13: content.ContentSearchRequest.category:type_name -> content.ContentCategory.Category
	5,  // 14: content.ContentSearchRequest.sub_category:type_name -> content.ContentSubCategory.SubCategory
	6,  // 15: content.ContentSearchRequest.sort_by:type_name -> content.ContentSearchRequest.SortBy
	7,  // 16: content.ContentService.Create:input_type -> content.Content
	7,  // 17: content.ContentService.Update:input_type -> content.Content
	18, // 18: content.ContentService.UpdateImpressionByIdList:input_type -> content.ContentIdListRequest
	14, // 19: content.ContentService.UpdateView:input_type -> content.ContentIdRequest
	14, // 20: content.ContentService.UpdateClick:input_type -> content.ContentIdRequest
	14, // 21: content.ContentService.Detaillete:input_type -> content.ContentIdRequest
	14, // 22: content.ContentService.GetById:input_type -> content.ContentIdRequest
	16, // 23: content.ContentService.GetByUuid:input_type -> content.ContentUuidRequest
	17, // 24: content.ContentService.GetByUuidAndUser:input_type -> content.ContentUuidAndUserIdRequest
	19, // 25: content.ContentService.GetListByUser:input_type -> content.ContentUserIdRequest
	21, // 26: content.ContentService.GetListBySearch:input_type -> content.ContentSearchRequest
	22, // 27: content.ContentService.GetLatestList:input_type -> google.protobuf.Empty
	22, // 28: content.ContentService.GetTrendList:input_type -> google.protobuf.Empty
	19, // 29: content.ContentService.GetRecommendedListByUser:input_type -> content.ContentUserIdRequest
	14, // 30: content.ContentService.GetRecommendedListByContent:input_type -> content.ContentIdRequest
	21, // 31: content.ContentService.GetSoldListByUser:input_type -> content.ContentSearchRequest
	21, // 32: content.ContentService.GetPurchasedListByUser:input_type -> content.ContentSearchRequest
	21, // 33: content.ContentService.GetLikedListByUser:input_type -> content.ContentSearchRequest
	21, // 34: content.ContentService.GetViewedListByUser:input_type -> content.ContentSearchRequest
	18, // 35: content.ContentService.GetListByIdList:input_type -> content.ContentIdListRequest
	22, // 36: content.ContentService.GetAll:input_type -> google.protobuf.Empty
	15, // 37: content.ContentService.CreateLike:input_type -> content.ContentIdAndUserIdRequest
	15, // 38: content.ContentService.DeleteLike:input_type -> content.ContentIdAndUserIdRequest
	7,  // 39: content.ContentService.Create:output_type -> content.Content
	20, // 40: content.ContentService.Update:output_type -> content.ContentBoolResponse
	20, // 41: content.ContentService.UpdateImpressionByIdList:output_type -> content.ContentBoolResponse
	20, // 42: content.ContentService.UpdateView:output_type -> content.ContentBoolResponse
	20, // 43: content.ContentService.UpdateClick:output_type -> content.ContentBoolResponse
	20, // 44: content.ContentService.Detaillete:output_type -> content.ContentBoolResponse
	7,  // 45: content.ContentService.GetById:output_type -> content.Content
	7,  // 46: content.ContentService.GetByUuid:output_type -> content.Content
	7,  // 47: content.ContentService.GetByUuidAndUser:output_type -> content.Content
	13, // 48: content.ContentService.GetListByUser:output_type -> content.ContentList
	13, // 49: content.ContentService.GetListBySearch:output_type -> content.ContentList
	13, // 50: content.ContentService.GetLatestList:output_type -> content.ContentList
	13, // 51: content.ContentService.GetTrendList:output_type -> content.ContentList
	13, // 52: content.ContentService.GetRecommendedListByUser:output_type -> content.ContentList
	13, // 53: content.ContentService.GetRecommendedListByContent:output_type -> content.ContentList
	13, // 54: content.ContentService.GetSoldListByUser:output_type -> content.ContentList
	13, // 55: content.ContentService.GetPurchasedListByUser:output_type -> content.ContentList
	13, // 56: content.ContentService.GetLikedListByUser:output_type -> content.ContentList
	13, // 57: content.ContentService.GetViewedListByUser:output_type -> content.ContentList
	13, // 58: content.ContentService.GetListByIdList:output_type -> content.ContentList
	13, // 59: content.ContentService.GetAll:output_type -> content.ContentList
	20, // 60: content.ContentService.CreateLike:output_type -> content.ContentBoolResponse
	20, // 61: content.ContentService.DeleteLike:output_type -> content.ContentBoolResponse
	39, // [39:62] is the sub-list for method output_type
	16, // [16:39] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_content_proto_init() }
func file_content_proto_init() {
	if File_content_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_content_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentPreview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentTool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentSubCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentIdAndUserIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentUuidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentUuidAndUserIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentIdListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentUserIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentBoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_content_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_content_proto_goTypes,
		DependencyIndexes: file_content_proto_depIdxs,
		EnumInfos:         file_content_proto_enumTypes,
		MessageInfos:      file_content_proto_msgTypes,
	}.Build()
	File_content_proto = out.File
	file_content_proto_rawDesc = nil
	file_content_proto_goTypes = nil
	file_content_proto_depIdxs = nil
}
