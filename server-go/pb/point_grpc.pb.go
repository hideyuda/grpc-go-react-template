// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: point.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PointServiceClient is the client API for PointService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PointServiceClient interface {
	// general
	// create
	Create(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Point, error)
	// update
	Update(ctx context.Context, in *Point, opts ...grpc.CallOption) (*PointBoolResponse, error)
	// delete
	Delete(ctx context.Context, in *PointIdRequest, opts ...grpc.CallOption) (*PointBoolResponse, error)
	// get by id
	GetById(ctx context.Context, in *PointIdRequest, opts ...grpc.CallOption) (*Point, error)
	// get by uuid
	GetByUuid(ctx context.Context, in *PointUuidRequest, opts ...grpc.CallOption) (*Point, error)
	// get onsale list by user
	GetByUser(ctx context.Context, in *PointUserIdRequest, opts ...grpc.CallOption) (*Point, error)
	// get list by id list
	GetListByIdList(ctx context.Context, in *PointIdListRequest, opts ...grpc.CallOption) (*PointList, error)
}

type pointServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPointServiceClient(cc grpc.ClientConnInterface) PointServiceClient {
	return &pointServiceClient{cc}
}

func (c *pointServiceClient) Create(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Point, error) {
	out := new(Point)
	err := c.cc.Invoke(ctx, "/point.PointService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointServiceClient) Update(ctx context.Context, in *Point, opts ...grpc.CallOption) (*PointBoolResponse, error) {
	out := new(PointBoolResponse)
	err := c.cc.Invoke(ctx, "/point.PointService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointServiceClient) Delete(ctx context.Context, in *PointIdRequest, opts ...grpc.CallOption) (*PointBoolResponse, error) {
	out := new(PointBoolResponse)
	err := c.cc.Invoke(ctx, "/point.PointService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointServiceClient) GetById(ctx context.Context, in *PointIdRequest, opts ...grpc.CallOption) (*Point, error) {
	out := new(Point)
	err := c.cc.Invoke(ctx, "/point.PointService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointServiceClient) GetByUuid(ctx context.Context, in *PointUuidRequest, opts ...grpc.CallOption) (*Point, error) {
	out := new(Point)
	err := c.cc.Invoke(ctx, "/point.PointService/GetByUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointServiceClient) GetByUser(ctx context.Context, in *PointUserIdRequest, opts ...grpc.CallOption) (*Point, error) {
	out := new(Point)
	err := c.cc.Invoke(ctx, "/point.PointService/GetByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointServiceClient) GetListByIdList(ctx context.Context, in *PointIdListRequest, opts ...grpc.CallOption) (*PointList, error) {
	out := new(PointList)
	err := c.cc.Invoke(ctx, "/point.PointService/GetListByIdList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PointServiceServer is the server API for PointService service.
// All implementations should embed UnimplementedPointServiceServer
// for forward compatibility
type PointServiceServer interface {
	// general
	// create
	Create(context.Context, *Point) (*Point, error)
	// update
	Update(context.Context, *Point) (*PointBoolResponse, error)
	// delete
	Delete(context.Context, *PointIdRequest) (*PointBoolResponse, error)
	// get by id
	GetById(context.Context, *PointIdRequest) (*Point, error)
	// get by uuid
	GetByUuid(context.Context, *PointUuidRequest) (*Point, error)
	// get onsale list by user
	GetByUser(context.Context, *PointUserIdRequest) (*Point, error)
	// get list by id list
	GetListByIdList(context.Context, *PointIdListRequest) (*PointList, error)
}

// UnimplementedPointServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPointServiceServer struct {
}

func (UnimplementedPointServiceServer) Create(context.Context, *Point) (*Point, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPointServiceServer) Update(context.Context, *Point) (*PointBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPointServiceServer) Delete(context.Context, *PointIdRequest) (*PointBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPointServiceServer) GetById(context.Context, *PointIdRequest) (*Point, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedPointServiceServer) GetByUuid(context.Context, *PointUuidRequest) (*Point, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByUuid not implemented")
}
func (UnimplementedPointServiceServer) GetByUser(context.Context, *PointUserIdRequest) (*Point, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByUser not implemented")
}
func (UnimplementedPointServiceServer) GetListByIdList(context.Context, *PointIdListRequest) (*PointList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListByIdList not implemented")
}

// UnsafePointServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PointServiceServer will
// result in compilation errors.
type UnsafePointServiceServer interface {
	mustEmbedUnimplementedPointServiceServer()
}

func RegisterPointServiceServer(s grpc.ServiceRegistrar, srv PointServiceServer) {
	s.RegisterService(&PointService_ServiceDesc, srv)
}

func _PointService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Point)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/point.PointService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointServiceServer).Create(ctx, req.(*Point))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Point)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/point.PointService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointServiceServer).Update(ctx, req.(*Point))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PointIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/point.PointService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointServiceServer).Delete(ctx, req.(*PointIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PointIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/point.PointService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointServiceServer).GetById(ctx, req.(*PointIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointService_GetByUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PointUuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointServiceServer).GetByUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/point.PointService/GetByUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointServiceServer).GetByUuid(ctx, req.(*PointUuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointService_GetByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PointUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointServiceServer).GetByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/point.PointService/GetByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointServiceServer).GetByUser(ctx, req.(*PointUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointService_GetListByIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PointIdListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointServiceServer).GetListByIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/point.PointService/GetListByIdList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointServiceServer).GetListByIdList(ctx, req.(*PointIdListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PointService_ServiceDesc is the grpc.ServiceDesc for PointService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PointService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "point.PointService",
	HandlerType: (*PointServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PointService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PointService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PointService_Delete_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _PointService_GetById_Handler,
		},
		{
			MethodName: "GetByUuid",
			Handler:    _PointService_GetByUuid_Handler,
		},
		{
			MethodName: "GetByUser",
			Handler:    _PointService_GetByUser_Handler,
		},
		{
			MethodName: "GetListByIdList",
			Handler:    _PointService_GetListByIdList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "point.proto",
}
