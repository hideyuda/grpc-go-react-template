// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: following.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FollowingServiceClient is the client API for FollowingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowingServiceClient interface {
	// create
	Create(ctx context.Context, in *Following, opts ...grpc.CallOption) (*Following, error)
	// update
	Update(ctx context.Context, in *Following, opts ...grpc.CallOption) (*FollowingBoolResponse, error)
	// delete
	Delete(ctx context.Context, in *FollowingIdRequest, opts ...grpc.CallOption) (*FollowingBoolResponse, error)
	// get by id
	GetById(ctx context.Context, in *FollowingIdRequest, opts ...grpc.CallOption) (*Following, error)
	// get by user
	GetFollowedListByUser(ctx context.Context, in *FollowingUserIdRequest, opts ...grpc.CallOption) (*FollowingList, error)
	// get by user
	GetFollowingListByUser(ctx context.Context, in *FollowingUserIdRequest, opts ...grpc.CallOption) (*FollowingList, error)
	// get list by id list
	GetListByIdList(ctx context.Context, in *FollowingIdListRequest, opts ...grpc.CallOption) (*FollowingList, error)
	// get all
	GetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FollowingList, error)
}

type followingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowingServiceClient(cc grpc.ClientConnInterface) FollowingServiceClient {
	return &followingServiceClient{cc}
}

func (c *followingServiceClient) Create(ctx context.Context, in *Following, opts ...grpc.CallOption) (*Following, error) {
	out := new(Following)
	err := c.cc.Invoke(ctx, "/following.FollowingService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followingServiceClient) Update(ctx context.Context, in *Following, opts ...grpc.CallOption) (*FollowingBoolResponse, error) {
	out := new(FollowingBoolResponse)
	err := c.cc.Invoke(ctx, "/following.FollowingService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followingServiceClient) Delete(ctx context.Context, in *FollowingIdRequest, opts ...grpc.CallOption) (*FollowingBoolResponse, error) {
	out := new(FollowingBoolResponse)
	err := c.cc.Invoke(ctx, "/following.FollowingService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followingServiceClient) GetById(ctx context.Context, in *FollowingIdRequest, opts ...grpc.CallOption) (*Following, error) {
	out := new(Following)
	err := c.cc.Invoke(ctx, "/following.FollowingService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followingServiceClient) GetFollowedListByUser(ctx context.Context, in *FollowingUserIdRequest, opts ...grpc.CallOption) (*FollowingList, error) {
	out := new(FollowingList)
	err := c.cc.Invoke(ctx, "/following.FollowingService/GetFollowedListByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followingServiceClient) GetFollowingListByUser(ctx context.Context, in *FollowingUserIdRequest, opts ...grpc.CallOption) (*FollowingList, error) {
	out := new(FollowingList)
	err := c.cc.Invoke(ctx, "/following.FollowingService/GetFollowingListByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followingServiceClient) GetListByIdList(ctx context.Context, in *FollowingIdListRequest, opts ...grpc.CallOption) (*FollowingList, error) {
	out := new(FollowingList)
	err := c.cc.Invoke(ctx, "/following.FollowingService/GetListByIdList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followingServiceClient) GetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FollowingList, error) {
	out := new(FollowingList)
	err := c.cc.Invoke(ctx, "/following.FollowingService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowingServiceServer is the server API for FollowingService service.
// All implementations should embed UnimplementedFollowingServiceServer
// for forward compatibility
type FollowingServiceServer interface {
	// create
	Create(context.Context, *Following) (*Following, error)
	// update
	Update(context.Context, *Following) (*FollowingBoolResponse, error)
	// delete
	Delete(context.Context, *FollowingIdRequest) (*FollowingBoolResponse, error)
	// get by id
	GetById(context.Context, *FollowingIdRequest) (*Following, error)
	// get by user
	GetFollowedListByUser(context.Context, *FollowingUserIdRequest) (*FollowingList, error)
	// get by user
	GetFollowingListByUser(context.Context, *FollowingUserIdRequest) (*FollowingList, error)
	// get list by id list
	GetListByIdList(context.Context, *FollowingIdListRequest) (*FollowingList, error)
	// get all
	GetAll(context.Context, *emptypb.Empty) (*FollowingList, error)
}

// UnimplementedFollowingServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFollowingServiceServer struct {
}

func (UnimplementedFollowingServiceServer) Create(context.Context, *Following) (*Following, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedFollowingServiceServer) Update(context.Context, *Following) (*FollowingBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedFollowingServiceServer) Delete(context.Context, *FollowingIdRequest) (*FollowingBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFollowingServiceServer) GetById(context.Context, *FollowingIdRequest) (*Following, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedFollowingServiceServer) GetFollowedListByUser(context.Context, *FollowingUserIdRequest) (*FollowingList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowedListByUser not implemented")
}
func (UnimplementedFollowingServiceServer) GetFollowingListByUser(context.Context, *FollowingUserIdRequest) (*FollowingList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowingListByUser not implemented")
}
func (UnimplementedFollowingServiceServer) GetListByIdList(context.Context, *FollowingIdListRequest) (*FollowingList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListByIdList not implemented")
}
func (UnimplementedFollowingServiceServer) GetAll(context.Context, *emptypb.Empty) (*FollowingList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}

// UnsafeFollowingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowingServiceServer will
// result in compilation errors.
type UnsafeFollowingServiceServer interface {
	mustEmbedUnimplementedFollowingServiceServer()
}

func RegisterFollowingServiceServer(s grpc.ServiceRegistrar, srv FollowingServiceServer) {
	s.RegisterService(&FollowingService_ServiceDesc, srv)
}

func _FollowingService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Following)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowingServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/following.FollowingService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowingServiceServer).Create(ctx, req.(*Following))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowingService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Following)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowingServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/following.FollowingService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowingServiceServer).Update(ctx, req.(*Following))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowingService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowingIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowingServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/following.FollowingService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowingServiceServer).Delete(ctx, req.(*FollowingIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowingService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowingIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowingServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/following.FollowingService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowingServiceServer).GetById(ctx, req.(*FollowingIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowingService_GetFollowedListByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowingUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowingServiceServer).GetFollowedListByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/following.FollowingService/GetFollowedListByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowingServiceServer).GetFollowedListByUser(ctx, req.(*FollowingUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowingService_GetFollowingListByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowingUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowingServiceServer).GetFollowingListByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/following.FollowingService/GetFollowingListByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowingServiceServer).GetFollowingListByUser(ctx, req.(*FollowingUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowingService_GetListByIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowingIdListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowingServiceServer).GetListByIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/following.FollowingService/GetListByIdList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowingServiceServer).GetListByIdList(ctx, req.(*FollowingIdListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowingService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowingServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/following.FollowingService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowingServiceServer).GetAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// FollowingService_ServiceDesc is the grpc.ServiceDesc for FollowingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FollowingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "following.FollowingService",
	HandlerType: (*FollowingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _FollowingService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _FollowingService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FollowingService_Delete_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _FollowingService_GetById_Handler,
		},
		{
			MethodName: "GetFollowedListByUser",
			Handler:    _FollowingService_GetFollowedListByUser_Handler,
		},
		{
			MethodName: "GetFollowingListByUser",
			Handler:    _FollowingService_GetFollowingListByUser_Handler,
		},
		{
			MethodName: "GetListByIdList",
			Handler:    _FollowingService_GetListByIdList_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _FollowingService_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "following.proto",
}
