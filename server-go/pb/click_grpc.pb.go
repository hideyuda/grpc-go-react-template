// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: click.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClickServiceClient is the client API for ClickService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClickServiceClient interface {
	// create
	Create(ctx context.Context, in *Click, opts ...grpc.CallOption) (*Click, error)
	// update
	Update(ctx context.Context, in *Click, opts ...grpc.CallOption) (*ClickBoolResponse, error)
	// delete
	Delete(ctx context.Context, in *ClickIdRequest, opts ...grpc.CallOption) (*ClickBoolResponse, error)
	// get by id
	GetById(ctx context.Context, in *ClickIdRequest, opts ...grpc.CallOption) (*Click, error)
	// get by user
	GetListByUser(ctx context.Context, in *ClickUserIdRequest, opts ...grpc.CallOption) (*ClickList, error)
	// get by content
	GetListByContent(ctx context.Context, in *ClickContentIdRequest, opts ...grpc.CallOption) (*ClickList, error)
	// get list by id list
	GetListByIdList(ctx context.Context, in *ClickIdListRequest, opts ...grpc.CallOption) (*ClickList, error)
	// get all
	GetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClickList, error)
}

type clickServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClickServiceClient(cc grpc.ClientConnInterface) ClickServiceClient {
	return &clickServiceClient{cc}
}

func (c *clickServiceClient) Create(ctx context.Context, in *Click, opts ...grpc.CallOption) (*Click, error) {
	out := new(Click)
	err := c.cc.Invoke(ctx, "/click.ClickService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clickServiceClient) Update(ctx context.Context, in *Click, opts ...grpc.CallOption) (*ClickBoolResponse, error) {
	out := new(ClickBoolResponse)
	err := c.cc.Invoke(ctx, "/click.ClickService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clickServiceClient) Delete(ctx context.Context, in *ClickIdRequest, opts ...grpc.CallOption) (*ClickBoolResponse, error) {
	out := new(ClickBoolResponse)
	err := c.cc.Invoke(ctx, "/click.ClickService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clickServiceClient) GetById(ctx context.Context, in *ClickIdRequest, opts ...grpc.CallOption) (*Click, error) {
	out := new(Click)
	err := c.cc.Invoke(ctx, "/click.ClickService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clickServiceClient) GetListByUser(ctx context.Context, in *ClickUserIdRequest, opts ...grpc.CallOption) (*ClickList, error) {
	out := new(ClickList)
	err := c.cc.Invoke(ctx, "/click.ClickService/GetListByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clickServiceClient) GetListByContent(ctx context.Context, in *ClickContentIdRequest, opts ...grpc.CallOption) (*ClickList, error) {
	out := new(ClickList)
	err := c.cc.Invoke(ctx, "/click.ClickService/GetListByContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clickServiceClient) GetListByIdList(ctx context.Context, in *ClickIdListRequest, opts ...grpc.CallOption) (*ClickList, error) {
	out := new(ClickList)
	err := c.cc.Invoke(ctx, "/click.ClickService/GetListByIdList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clickServiceClient) GetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClickList, error) {
	out := new(ClickList)
	err := c.cc.Invoke(ctx, "/click.ClickService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClickServiceServer is the server API for ClickService service.
// All implementations should embed UnimplementedClickServiceServer
// for forward compatibility
type ClickServiceServer interface {
	// create
	Create(context.Context, *Click) (*Click, error)
	// update
	Update(context.Context, *Click) (*ClickBoolResponse, error)
	// delete
	Delete(context.Context, *ClickIdRequest) (*ClickBoolResponse, error)
	// get by id
	GetById(context.Context, *ClickIdRequest) (*Click, error)
	// get by user
	GetListByUser(context.Context, *ClickUserIdRequest) (*ClickList, error)
	// get by content
	GetListByContent(context.Context, *ClickContentIdRequest) (*ClickList, error)
	// get list by id list
	GetListByIdList(context.Context, *ClickIdListRequest) (*ClickList, error)
	// get all
	GetAll(context.Context, *emptypb.Empty) (*ClickList, error)
}

// UnimplementedClickServiceServer should be embedded to have forward compatible implementations.
type UnimplementedClickServiceServer struct {
}

func (UnimplementedClickServiceServer) Create(context.Context, *Click) (*Click, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedClickServiceServer) Update(context.Context, *Click) (*ClickBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedClickServiceServer) Delete(context.Context, *ClickIdRequest) (*ClickBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedClickServiceServer) GetById(context.Context, *ClickIdRequest) (*Click, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedClickServiceServer) GetListByUser(context.Context, *ClickUserIdRequest) (*ClickList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListByUser not implemented")
}
func (UnimplementedClickServiceServer) GetListByContent(context.Context, *ClickContentIdRequest) (*ClickList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListByContent not implemented")
}
func (UnimplementedClickServiceServer) GetListByIdList(context.Context, *ClickIdListRequest) (*ClickList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListByIdList not implemented")
}
func (UnimplementedClickServiceServer) GetAll(context.Context, *emptypb.Empty) (*ClickList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}

// UnsafeClickServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClickServiceServer will
// result in compilation errors.
type UnsafeClickServiceServer interface {
	mustEmbedUnimplementedClickServiceServer()
}

func RegisterClickServiceServer(s grpc.ServiceRegistrar, srv ClickServiceServer) {
	s.RegisterService(&ClickService_ServiceDesc, srv)
}

func _ClickService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Click)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClickServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/click.ClickService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClickServiceServer).Create(ctx, req.(*Click))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClickService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Click)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClickServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/click.ClickService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClickServiceServer).Update(ctx, req.(*Click))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClickService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClickIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClickServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/click.ClickService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClickServiceServer).Delete(ctx, req.(*ClickIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClickService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClickIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClickServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/click.ClickService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClickServiceServer).GetById(ctx, req.(*ClickIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClickService_GetListByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClickUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClickServiceServer).GetListByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/click.ClickService/GetListByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClickServiceServer).GetListByUser(ctx, req.(*ClickUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClickService_GetListByContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClickContentIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClickServiceServer).GetListByContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/click.ClickService/GetListByContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClickServiceServer).GetListByContent(ctx, req.(*ClickContentIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClickService_GetListByIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClickIdListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClickServiceServer).GetListByIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/click.ClickService/GetListByIdList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClickServiceServer).GetListByIdList(ctx, req.(*ClickIdListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClickService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClickServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/click.ClickService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClickServiceServer).GetAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ClickService_ServiceDesc is the grpc.ServiceDesc for ClickService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClickService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "click.ClickService",
	HandlerType: (*ClickServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ClickService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ClickService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ClickService_Delete_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _ClickService_GetById_Handler,
		},
		{
			MethodName: "GetListByUser",
			Handler:    _ClickService_GetListByUser_Handler,
		},
		{
			MethodName: "GetListByContent",
			Handler:    _ClickService_GetListByContent_Handler,
		},
		{
			MethodName: "GetListByIdList",
			Handler:    _ClickService_GetListByIdList_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _ClickService_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "click.proto",
}
