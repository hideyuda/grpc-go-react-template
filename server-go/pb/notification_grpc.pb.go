// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: notification.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationServiceClient interface {
	// create
	Create(ctx context.Context, in *Notification, opts ...grpc.CallOption) (*Notification, error)
	// update
	Update(ctx context.Context, in *Notification, opts ...grpc.CallOption) (*NotificationBoolResponse, error)
	// update is_read when user read notification
	UpdateIsRead(ctx context.Context, in *NotificationUuidRequest, opts ...grpc.CallOption) (*NotificationBoolResponse, error)
	// delete
	Delete(ctx context.Context, in *NotificationIdRequest, opts ...grpc.CallOption) (*NotificationBoolResponse, error)
	// get by id
	GetById(ctx context.Context, in *NotificationIdRequest, opts ...grpc.CallOption) (*Notification, error)
	// get by uuid
	GetByUuid(ctx context.Context, in *NotificationUuidRequest, opts ...grpc.CallOption) (*Notification, error)
	// get by receive user
	GetListByReceiveUser(ctx context.Context, in *NotificationUserIdRequest, opts ...grpc.CallOption) (*NotificationList, error)
	// get unread list by receive user
	GetUnReadListByReceiveUser(ctx context.Context, in *NotificationUserIdRequest, opts ...grpc.CallOption) (*NotificationList, error)
	// get by send user
	GetListBySendUser(ctx context.Context, in *NotificationUserIdRequest, opts ...grpc.CallOption) (*NotificationList, error)
	// get list by id list
	GetListByIdList(ctx context.Context, in *NotificationIdListRequest, opts ...grpc.CallOption) (*NotificationList, error)
	// get all
	GetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NotificationList, error)
}

type notificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceClient(cc grpc.ClientConnInterface) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) Create(ctx context.Context, in *Notification, opts ...grpc.CallOption) (*Notification, error) {
	out := new(Notification)
	err := c.cc.Invoke(ctx, "/notification.NotificationService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) Update(ctx context.Context, in *Notification, opts ...grpc.CallOption) (*NotificationBoolResponse, error) {
	out := new(NotificationBoolResponse)
	err := c.cc.Invoke(ctx, "/notification.NotificationService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) UpdateIsRead(ctx context.Context, in *NotificationUuidRequest, opts ...grpc.CallOption) (*NotificationBoolResponse, error) {
	out := new(NotificationBoolResponse)
	err := c.cc.Invoke(ctx, "/notification.NotificationService/UpdateIsRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) Delete(ctx context.Context, in *NotificationIdRequest, opts ...grpc.CallOption) (*NotificationBoolResponse, error) {
	out := new(NotificationBoolResponse)
	err := c.cc.Invoke(ctx, "/notification.NotificationService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetById(ctx context.Context, in *NotificationIdRequest, opts ...grpc.CallOption) (*Notification, error) {
	out := new(Notification)
	err := c.cc.Invoke(ctx, "/notification.NotificationService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetByUuid(ctx context.Context, in *NotificationUuidRequest, opts ...grpc.CallOption) (*Notification, error) {
	out := new(Notification)
	err := c.cc.Invoke(ctx, "/notification.NotificationService/GetByUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetListByReceiveUser(ctx context.Context, in *NotificationUserIdRequest, opts ...grpc.CallOption) (*NotificationList, error) {
	out := new(NotificationList)
	err := c.cc.Invoke(ctx, "/notification.NotificationService/GetListByReceiveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetUnReadListByReceiveUser(ctx context.Context, in *NotificationUserIdRequest, opts ...grpc.CallOption) (*NotificationList, error) {
	out := new(NotificationList)
	err := c.cc.Invoke(ctx, "/notification.NotificationService/GetUnReadListByReceiveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetListBySendUser(ctx context.Context, in *NotificationUserIdRequest, opts ...grpc.CallOption) (*NotificationList, error) {
	out := new(NotificationList)
	err := c.cc.Invoke(ctx, "/notification.NotificationService/GetListBySendUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetListByIdList(ctx context.Context, in *NotificationIdListRequest, opts ...grpc.CallOption) (*NotificationList, error) {
	out := new(NotificationList)
	err := c.cc.Invoke(ctx, "/notification.NotificationService/GetListByIdList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NotificationList, error) {
	out := new(NotificationList)
	err := c.cc.Invoke(ctx, "/notification.NotificationService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
// All implementations should embed UnimplementedNotificationServiceServer
// for forward compatibility
type NotificationServiceServer interface {
	// create
	Create(context.Context, *Notification) (*Notification, error)
	// update
	Update(context.Context, *Notification) (*NotificationBoolResponse, error)
	// update is_read when user read notification
	UpdateIsRead(context.Context, *NotificationUuidRequest) (*NotificationBoolResponse, error)
	// delete
	Delete(context.Context, *NotificationIdRequest) (*NotificationBoolResponse, error)
	// get by id
	GetById(context.Context, *NotificationIdRequest) (*Notification, error)
	// get by uuid
	GetByUuid(context.Context, *NotificationUuidRequest) (*Notification, error)
	// get by receive user
	GetListByReceiveUser(context.Context, *NotificationUserIdRequest) (*NotificationList, error)
	// get unread list by receive user
	GetUnReadListByReceiveUser(context.Context, *NotificationUserIdRequest) (*NotificationList, error)
	// get by send user
	GetListBySendUser(context.Context, *NotificationUserIdRequest) (*NotificationList, error)
	// get list by id list
	GetListByIdList(context.Context, *NotificationIdListRequest) (*NotificationList, error)
	// get all
	GetAll(context.Context, *emptypb.Empty) (*NotificationList, error)
}

// UnimplementedNotificationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNotificationServiceServer struct {
}

func (UnimplementedNotificationServiceServer) Create(context.Context, *Notification) (*Notification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedNotificationServiceServer) Update(context.Context, *Notification) (*NotificationBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedNotificationServiceServer) UpdateIsRead(context.Context, *NotificationUuidRequest) (*NotificationBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIsRead not implemented")
}
func (UnimplementedNotificationServiceServer) Delete(context.Context, *NotificationIdRequest) (*NotificationBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedNotificationServiceServer) GetById(context.Context, *NotificationIdRequest) (*Notification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedNotificationServiceServer) GetByUuid(context.Context, *NotificationUuidRequest) (*Notification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByUuid not implemented")
}
func (UnimplementedNotificationServiceServer) GetListByReceiveUser(context.Context, *NotificationUserIdRequest) (*NotificationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListByReceiveUser not implemented")
}
func (UnimplementedNotificationServiceServer) GetUnReadListByReceiveUser(context.Context, *NotificationUserIdRequest) (*NotificationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnReadListByReceiveUser not implemented")
}
func (UnimplementedNotificationServiceServer) GetListBySendUser(context.Context, *NotificationUserIdRequest) (*NotificationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListBySendUser not implemented")
}
func (UnimplementedNotificationServiceServer) GetListByIdList(context.Context, *NotificationIdListRequest) (*NotificationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListByIdList not implemented")
}
func (UnimplementedNotificationServiceServer) GetAll(context.Context, *emptypb.Empty) (*NotificationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}

// UnsafeNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServiceServer will
// result in compilation errors.
type UnsafeNotificationServiceServer interface {
	mustEmbedUnimplementedNotificationServiceServer()
}

func RegisterNotificationServiceServer(s grpc.ServiceRegistrar, srv NotificationServiceServer) {
	s.RegisterService(&NotificationService_ServiceDesc, srv)
}

func _NotificationService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.NotificationService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).Create(ctx, req.(*Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.NotificationService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).Update(ctx, req.(*Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_UpdateIsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationUuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).UpdateIsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.NotificationService/UpdateIsRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).UpdateIsRead(ctx, req.(*NotificationUuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.NotificationService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).Delete(ctx, req.(*NotificationIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.NotificationService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetById(ctx, req.(*NotificationIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetByUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationUuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetByUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.NotificationService/GetByUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetByUuid(ctx, req.(*NotificationUuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetListByReceiveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetListByReceiveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.NotificationService/GetListByReceiveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetListByReceiveUser(ctx, req.(*NotificationUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetUnReadListByReceiveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetUnReadListByReceiveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.NotificationService/GetUnReadListByReceiveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetUnReadListByReceiveUser(ctx, req.(*NotificationUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetListBySendUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetListBySendUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.NotificationService/GetListBySendUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetListBySendUser(ctx, req.(*NotificationUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetListByIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationIdListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetListByIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.NotificationService/GetListByIdList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetListByIdList(ctx, req.(*NotificationIdListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.NotificationService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationService_ServiceDesc is the grpc.ServiceDesc for NotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notification.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _NotificationService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _NotificationService_Update_Handler,
		},
		{
			MethodName: "UpdateIsRead",
			Handler:    _NotificationService_UpdateIsRead_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _NotificationService_Delete_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _NotificationService_GetById_Handler,
		},
		{
			MethodName: "GetByUuid",
			Handler:    _NotificationService_GetByUuid_Handler,
		},
		{
			MethodName: "GetListByReceiveUser",
			Handler:    _NotificationService_GetListByReceiveUser_Handler,
		},
		{
			MethodName: "GetUnReadListByReceiveUser",
			Handler:    _NotificationService_GetUnReadListByReceiveUser_Handler,
		},
		{
			MethodName: "GetListBySendUser",
			Handler:    _NotificationService_GetListBySendUser_Handler,
		},
		{
			MethodName: "GetListByIdList",
			Handler:    _NotificationService_GetListByIdList_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _NotificationService_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notification.proto",
}
