/**
 * @fileoverview gRPC-Web generated client stub for user
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.21.6
// source: user.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb';
import * as user_pb from './user_pb';


export class UserServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreate = new grpcWeb.MethodDescriptor(
    '/user.UserService/Create',
    grpcWeb.MethodType.UNARY,
    user_pb.User,
    user_pb.User,
    (request: user_pb.User) => {
      return request.serializeBinary();
    },
    user_pb.User.deserializeBinary
  );

  create(
    request: user_pb.User,
    metadata: grpcWeb.Metadata | null): Promise<user_pb.User>;

  create(
    request: user_pb.User,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_pb.User) => void): grpcWeb.ClientReadableStream<user_pb.User>;

  create(
    request: user_pb.User,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_pb.User) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user.UserService/Create',
        request,
        metadata || {},
        this.methodDescriptorCreate,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user.UserService/Create',
    request,
    metadata || {},
    this.methodDescriptorCreate);
  }

  methodDescriptorUpdate = new grpcWeb.MethodDescriptor(
    '/user.UserService/Update',
    grpcWeb.MethodType.UNARY,
    user_pb.User,
    user_pb.UserBoolResponse,
    (request: user_pb.User) => {
      return request.serializeBinary();
    },
    user_pb.UserBoolResponse.deserializeBinary
  );

  update(
    request: user_pb.User,
    metadata: grpcWeb.Metadata | null): Promise<user_pb.UserBoolResponse>;

  update(
    request: user_pb.User,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_pb.UserBoolResponse) => void): grpcWeb.ClientReadableStream<user_pb.UserBoolResponse>;

  update(
    request: user_pb.User,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_pb.UserBoolResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user.UserService/Update',
        request,
        metadata || {},
        this.methodDescriptorUpdate,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user.UserService/Update',
    request,
    metadata || {},
    this.methodDescriptorUpdate);
  }

  methodDescriptorDelete = new grpcWeb.MethodDescriptor(
    '/user.UserService/Delete',
    grpcWeb.MethodType.UNARY,
    user_pb.UserIdRequest,
    user_pb.UserBoolResponse,
    (request: user_pb.UserIdRequest) => {
      return request.serializeBinary();
    },
    user_pb.UserBoolResponse.deserializeBinary
  );

  delete(
    request: user_pb.UserIdRequest,
    metadata: grpcWeb.Metadata | null): Promise<user_pb.UserBoolResponse>;

  delete(
    request: user_pb.UserIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_pb.UserBoolResponse) => void): grpcWeb.ClientReadableStream<user_pb.UserBoolResponse>;

  delete(
    request: user_pb.UserIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_pb.UserBoolResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user.UserService/Delete',
        request,
        metadata || {},
        this.methodDescriptorDelete,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user.UserService/Delete',
    request,
    metadata || {},
    this.methodDescriptorDelete);
  }

  methodDescriptorGetById = new grpcWeb.MethodDescriptor(
    '/user.UserService/GetById',
    grpcWeb.MethodType.UNARY,
    user_pb.UserIdRequest,
    user_pb.User,
    (request: user_pb.UserIdRequest) => {
      return request.serializeBinary();
    },
    user_pb.User.deserializeBinary
  );

  getById(
    request: user_pb.UserIdRequest,
    metadata: grpcWeb.Metadata | null): Promise<user_pb.User>;

  getById(
    request: user_pb.UserIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_pb.User) => void): grpcWeb.ClientReadableStream<user_pb.User>;

  getById(
    request: user_pb.UserIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_pb.User) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user.UserService/GetById',
        request,
        metadata || {},
        this.methodDescriptorGetById,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user.UserService/GetById',
    request,
    metadata || {},
    this.methodDescriptorGetById);
  }

  methodDescriptorGetByUuid = new grpcWeb.MethodDescriptor(
    '/user.UserService/GetByUuid',
    grpcWeb.MethodType.UNARY,
    user_pb.UserUuidRequest,
    user_pb.User,
    (request: user_pb.UserUuidRequest) => {
      return request.serializeBinary();
    },
    user_pb.User.deserializeBinary
  );

  getByUuid(
    request: user_pb.UserUuidRequest,
    metadata: grpcWeb.Metadata | null): Promise<user_pb.User>;

  getByUuid(
    request: user_pb.UserUuidRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_pb.User) => void): grpcWeb.ClientReadableStream<user_pb.User>;

  getByUuid(
    request: user_pb.UserUuidRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_pb.User) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user.UserService/GetByUuid',
        request,
        metadata || {},
        this.methodDescriptorGetByUuid,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user.UserService/GetByUuid',
    request,
    metadata || {},
    this.methodDescriptorGetByUuid);
  }

  methodDescriptorGetListByType = new grpcWeb.MethodDescriptor(
    '/user.UserService/GetListByType',
    grpcWeb.MethodType.UNARY,
    user_pb.UserTypeRequest,
    user_pb.UserList,
    (request: user_pb.UserTypeRequest) => {
      return request.serializeBinary();
    },
    user_pb.UserList.deserializeBinary
  );

  getListByType(
    request: user_pb.UserTypeRequest,
    metadata: grpcWeb.Metadata | null): Promise<user_pb.UserList>;

  getListByType(
    request: user_pb.UserTypeRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_pb.UserList) => void): grpcWeb.ClientReadableStream<user_pb.UserList>;

  getListByType(
    request: user_pb.UserTypeRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_pb.UserList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user.UserService/GetListByType',
        request,
        metadata || {},
        this.methodDescriptorGetListByType,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user.UserService/GetListByType',
    request,
    metadata || {},
    this.methodDescriptorGetListByType);
  }

  methodDescriptorGetLatestList = new grpcWeb.MethodDescriptor(
    '/user.UserService/GetLatestList',
    grpcWeb.MethodType.UNARY,
    google_protobuf_empty_pb.Empty,
    user_pb.UserList,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    user_pb.UserList.deserializeBinary
  );

  getLatestList(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<user_pb.UserList>;

  getLatestList(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_pb.UserList) => void): grpcWeb.ClientReadableStream<user_pb.UserList>;

  getLatestList(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_pb.UserList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user.UserService/GetLatestList',
        request,
        metadata || {},
        this.methodDescriptorGetLatestList,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user.UserService/GetLatestList',
    request,
    metadata || {},
    this.methodDescriptorGetLatestList);
  }

  methodDescriptorGetTrendList = new grpcWeb.MethodDescriptor(
    '/user.UserService/GetTrendList',
    grpcWeb.MethodType.UNARY,
    google_protobuf_empty_pb.Empty,
    user_pb.UserList,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    user_pb.UserList.deserializeBinary
  );

  getTrendList(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<user_pb.UserList>;

  getTrendList(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_pb.UserList) => void): grpcWeb.ClientReadableStream<user_pb.UserList>;

  getTrendList(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_pb.UserList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user.UserService/GetTrendList',
        request,
        metadata || {},
        this.methodDescriptorGetTrendList,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user.UserService/GetTrendList',
    request,
    metadata || {},
    this.methodDescriptorGetTrendList);
  }

  methodDescriptorGetListBySearch = new grpcWeb.MethodDescriptor(
    '/user.UserService/GetListBySearch',
    grpcWeb.MethodType.UNARY,
    user_pb.UserSearchRequest,
    user_pb.UserList,
    (request: user_pb.UserSearchRequest) => {
      return request.serializeBinary();
    },
    user_pb.UserList.deserializeBinary
  );

  getListBySearch(
    request: user_pb.UserSearchRequest,
    metadata: grpcWeb.Metadata | null): Promise<user_pb.UserList>;

  getListBySearch(
    request: user_pb.UserSearchRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_pb.UserList) => void): grpcWeb.ClientReadableStream<user_pb.UserList>;

  getListBySearch(
    request: user_pb.UserSearchRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_pb.UserList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user.UserService/GetListBySearch',
        request,
        metadata || {},
        this.methodDescriptorGetListBySearch,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user.UserService/GetListBySearch',
    request,
    metadata || {},
    this.methodDescriptorGetListBySearch);
  }

  methodDescriptorSignIn = new grpcWeb.MethodDescriptor(
    '/user.UserService/SignIn',
    grpcWeb.MethodType.UNARY,
    user_pb.SignInRequest,
    user_pb.User,
    (request: user_pb.SignInRequest) => {
      return request.serializeBinary();
    },
    user_pb.User.deserializeBinary
  );

  signIn(
    request: user_pb.SignInRequest,
    metadata: grpcWeb.Metadata | null): Promise<user_pb.User>;

  signIn(
    request: user_pb.SignInRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_pb.User) => void): grpcWeb.ClientReadableStream<user_pb.User>;

  signIn(
    request: user_pb.SignInRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_pb.User) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user.UserService/SignIn',
        request,
        metadata || {},
        this.methodDescriptorSignIn,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user.UserService/SignIn',
    request,
    metadata || {},
    this.methodDescriptorSignIn);
  }

  methodDescriptorSignInWithGoogle = new grpcWeb.MethodDescriptor(
    '/user.UserService/SignInWithGoogle',
    grpcWeb.MethodType.UNARY,
    user_pb.User,
    user_pb.User,
    (request: user_pb.User) => {
      return request.serializeBinary();
    },
    user_pb.User.deserializeBinary
  );

  signInWithGoogle(
    request: user_pb.User,
    metadata: grpcWeb.Metadata | null): Promise<user_pb.User>;

  signInWithGoogle(
    request: user_pb.User,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_pb.User) => void): grpcWeb.ClientReadableStream<user_pb.User>;

  signInWithGoogle(
    request: user_pb.User,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_pb.User) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user.UserService/SignInWithGoogle',
        request,
        metadata || {},
        this.methodDescriptorSignInWithGoogle,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user.UserService/SignInWithGoogle',
    request,
    metadata || {},
    this.methodDescriptorSignInWithGoogle);
  }

}

