/**
 * @fileoverview gRPC-Web generated client stub for notification
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.21.6
// source: notification.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb';
import * as notification_pb from './notification_pb';


export class NotificationServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreate = new grpcWeb.MethodDescriptor(
    '/notification.NotificationService/Create',
    grpcWeb.MethodType.UNARY,
    notification_pb.Notification,
    notification_pb.Notification,
    (request: notification_pb.Notification) => {
      return request.serializeBinary();
    },
    notification_pb.Notification.deserializeBinary
  );

  create(
    request: notification_pb.Notification,
    metadata: grpcWeb.Metadata | null): Promise<notification_pb.Notification>;

  create(
    request: notification_pb.Notification,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: notification_pb.Notification) => void): grpcWeb.ClientReadableStream<notification_pb.Notification>;

  create(
    request: notification_pb.Notification,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: notification_pb.Notification) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/notification.NotificationService/Create',
        request,
        metadata || {},
        this.methodDescriptorCreate,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/notification.NotificationService/Create',
    request,
    metadata || {},
    this.methodDescriptorCreate);
  }

  methodDescriptorUpdate = new grpcWeb.MethodDescriptor(
    '/notification.NotificationService/Update',
    grpcWeb.MethodType.UNARY,
    notification_pb.Notification,
    notification_pb.NotificationBoolResponse,
    (request: notification_pb.Notification) => {
      return request.serializeBinary();
    },
    notification_pb.NotificationBoolResponse.deserializeBinary
  );

  update(
    request: notification_pb.Notification,
    metadata: grpcWeb.Metadata | null): Promise<notification_pb.NotificationBoolResponse>;

  update(
    request: notification_pb.Notification,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: notification_pb.NotificationBoolResponse) => void): grpcWeb.ClientReadableStream<notification_pb.NotificationBoolResponse>;

  update(
    request: notification_pb.Notification,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: notification_pb.NotificationBoolResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/notification.NotificationService/Update',
        request,
        metadata || {},
        this.methodDescriptorUpdate,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/notification.NotificationService/Update',
    request,
    metadata || {},
    this.methodDescriptorUpdate);
  }

  methodDescriptorUpdateIsRead = new grpcWeb.MethodDescriptor(
    '/notification.NotificationService/UpdateIsRead',
    grpcWeb.MethodType.UNARY,
    notification_pb.NotificationUuidRequest,
    notification_pb.NotificationBoolResponse,
    (request: notification_pb.NotificationUuidRequest) => {
      return request.serializeBinary();
    },
    notification_pb.NotificationBoolResponse.deserializeBinary
  );

  updateIsRead(
    request: notification_pb.NotificationUuidRequest,
    metadata: grpcWeb.Metadata | null): Promise<notification_pb.NotificationBoolResponse>;

  updateIsRead(
    request: notification_pb.NotificationUuidRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: notification_pb.NotificationBoolResponse) => void): grpcWeb.ClientReadableStream<notification_pb.NotificationBoolResponse>;

  updateIsRead(
    request: notification_pb.NotificationUuidRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: notification_pb.NotificationBoolResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/notification.NotificationService/UpdateIsRead',
        request,
        metadata || {},
        this.methodDescriptorUpdateIsRead,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/notification.NotificationService/UpdateIsRead',
    request,
    metadata || {},
    this.methodDescriptorUpdateIsRead);
  }

  methodDescriptorDelete = new grpcWeb.MethodDescriptor(
    '/notification.NotificationService/Delete',
    grpcWeb.MethodType.UNARY,
    notification_pb.NotificationIdRequest,
    notification_pb.NotificationBoolResponse,
    (request: notification_pb.NotificationIdRequest) => {
      return request.serializeBinary();
    },
    notification_pb.NotificationBoolResponse.deserializeBinary
  );

  delete(
    request: notification_pb.NotificationIdRequest,
    metadata: grpcWeb.Metadata | null): Promise<notification_pb.NotificationBoolResponse>;

  delete(
    request: notification_pb.NotificationIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: notification_pb.NotificationBoolResponse) => void): grpcWeb.ClientReadableStream<notification_pb.NotificationBoolResponse>;

  delete(
    request: notification_pb.NotificationIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: notification_pb.NotificationBoolResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/notification.NotificationService/Delete',
        request,
        metadata || {},
        this.methodDescriptorDelete,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/notification.NotificationService/Delete',
    request,
    metadata || {},
    this.methodDescriptorDelete);
  }

  methodDescriptorGetById = new grpcWeb.MethodDescriptor(
    '/notification.NotificationService/GetById',
    grpcWeb.MethodType.UNARY,
    notification_pb.NotificationIdRequest,
    notification_pb.Notification,
    (request: notification_pb.NotificationIdRequest) => {
      return request.serializeBinary();
    },
    notification_pb.Notification.deserializeBinary
  );

  getById(
    request: notification_pb.NotificationIdRequest,
    metadata: grpcWeb.Metadata | null): Promise<notification_pb.Notification>;

  getById(
    request: notification_pb.NotificationIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: notification_pb.Notification) => void): grpcWeb.ClientReadableStream<notification_pb.Notification>;

  getById(
    request: notification_pb.NotificationIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: notification_pb.Notification) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/notification.NotificationService/GetById',
        request,
        metadata || {},
        this.methodDescriptorGetById,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/notification.NotificationService/GetById',
    request,
    metadata || {},
    this.methodDescriptorGetById);
  }

  methodDescriptorGetByUuid = new grpcWeb.MethodDescriptor(
    '/notification.NotificationService/GetByUuid',
    grpcWeb.MethodType.UNARY,
    notification_pb.NotificationUuidRequest,
    notification_pb.Notification,
    (request: notification_pb.NotificationUuidRequest) => {
      return request.serializeBinary();
    },
    notification_pb.Notification.deserializeBinary
  );

  getByUuid(
    request: notification_pb.NotificationUuidRequest,
    metadata: grpcWeb.Metadata | null): Promise<notification_pb.Notification>;

  getByUuid(
    request: notification_pb.NotificationUuidRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: notification_pb.Notification) => void): grpcWeb.ClientReadableStream<notification_pb.Notification>;

  getByUuid(
    request: notification_pb.NotificationUuidRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: notification_pb.Notification) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/notification.NotificationService/GetByUuid',
        request,
        metadata || {},
        this.methodDescriptorGetByUuid,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/notification.NotificationService/GetByUuid',
    request,
    metadata || {},
    this.methodDescriptorGetByUuid);
  }

  methodDescriptorGetListByReceiveUser = new grpcWeb.MethodDescriptor(
    '/notification.NotificationService/GetListByReceiveUser',
    grpcWeb.MethodType.UNARY,
    notification_pb.NotificationUserIdRequest,
    notification_pb.NotificationList,
    (request: notification_pb.NotificationUserIdRequest) => {
      return request.serializeBinary();
    },
    notification_pb.NotificationList.deserializeBinary
  );

  getListByReceiveUser(
    request: notification_pb.NotificationUserIdRequest,
    metadata: grpcWeb.Metadata | null): Promise<notification_pb.NotificationList>;

  getListByReceiveUser(
    request: notification_pb.NotificationUserIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: notification_pb.NotificationList) => void): grpcWeb.ClientReadableStream<notification_pb.NotificationList>;

  getListByReceiveUser(
    request: notification_pb.NotificationUserIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: notification_pb.NotificationList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/notification.NotificationService/GetListByReceiveUser',
        request,
        metadata || {},
        this.methodDescriptorGetListByReceiveUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/notification.NotificationService/GetListByReceiveUser',
    request,
    metadata || {},
    this.methodDescriptorGetListByReceiveUser);
  }

  methodDescriptorGetUnReadListByReceiveUser = new grpcWeb.MethodDescriptor(
    '/notification.NotificationService/GetUnReadListByReceiveUser',
    grpcWeb.MethodType.UNARY,
    notification_pb.NotificationUserIdRequest,
    notification_pb.NotificationList,
    (request: notification_pb.NotificationUserIdRequest) => {
      return request.serializeBinary();
    },
    notification_pb.NotificationList.deserializeBinary
  );

  getUnReadListByReceiveUser(
    request: notification_pb.NotificationUserIdRequest,
    metadata: grpcWeb.Metadata | null): Promise<notification_pb.NotificationList>;

  getUnReadListByReceiveUser(
    request: notification_pb.NotificationUserIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: notification_pb.NotificationList) => void): grpcWeb.ClientReadableStream<notification_pb.NotificationList>;

  getUnReadListByReceiveUser(
    request: notification_pb.NotificationUserIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: notification_pb.NotificationList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/notification.NotificationService/GetUnReadListByReceiveUser',
        request,
        metadata || {},
        this.methodDescriptorGetUnReadListByReceiveUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/notification.NotificationService/GetUnReadListByReceiveUser',
    request,
    metadata || {},
    this.methodDescriptorGetUnReadListByReceiveUser);
  }

  methodDescriptorGetListBySendUser = new grpcWeb.MethodDescriptor(
    '/notification.NotificationService/GetListBySendUser',
    grpcWeb.MethodType.UNARY,
    notification_pb.NotificationUserIdRequest,
    notification_pb.NotificationList,
    (request: notification_pb.NotificationUserIdRequest) => {
      return request.serializeBinary();
    },
    notification_pb.NotificationList.deserializeBinary
  );

  getListBySendUser(
    request: notification_pb.NotificationUserIdRequest,
    metadata: grpcWeb.Metadata | null): Promise<notification_pb.NotificationList>;

  getListBySendUser(
    request: notification_pb.NotificationUserIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: notification_pb.NotificationList) => void): grpcWeb.ClientReadableStream<notification_pb.NotificationList>;

  getListBySendUser(
    request: notification_pb.NotificationUserIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: notification_pb.NotificationList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/notification.NotificationService/GetListBySendUser',
        request,
        metadata || {},
        this.methodDescriptorGetListBySendUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/notification.NotificationService/GetListBySendUser',
    request,
    metadata || {},
    this.methodDescriptorGetListBySendUser);
  }

  methodDescriptorGetListByIdList = new grpcWeb.MethodDescriptor(
    '/notification.NotificationService/GetListByIdList',
    grpcWeb.MethodType.UNARY,
    notification_pb.NotificationIdListRequest,
    notification_pb.NotificationList,
    (request: notification_pb.NotificationIdListRequest) => {
      return request.serializeBinary();
    },
    notification_pb.NotificationList.deserializeBinary
  );

  getListByIdList(
    request: notification_pb.NotificationIdListRequest,
    metadata: grpcWeb.Metadata | null): Promise<notification_pb.NotificationList>;

  getListByIdList(
    request: notification_pb.NotificationIdListRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: notification_pb.NotificationList) => void): grpcWeb.ClientReadableStream<notification_pb.NotificationList>;

  getListByIdList(
    request: notification_pb.NotificationIdListRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: notification_pb.NotificationList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/notification.NotificationService/GetListByIdList',
        request,
        metadata || {},
        this.methodDescriptorGetListByIdList,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/notification.NotificationService/GetListByIdList',
    request,
    metadata || {},
    this.methodDescriptorGetListByIdList);
  }

  methodDescriptorGetAll = new grpcWeb.MethodDescriptor(
    '/notification.NotificationService/GetAll',
    grpcWeb.MethodType.UNARY,
    google_protobuf_empty_pb.Empty,
    notification_pb.NotificationList,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    notification_pb.NotificationList.deserializeBinary
  );

  getAll(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<notification_pb.NotificationList>;

  getAll(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: notification_pb.NotificationList) => void): grpcWeb.ClientReadableStream<notification_pb.NotificationList>;

  getAll(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: notification_pb.NotificationList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/notification.NotificationService/GetAll',
        request,
        metadata || {},
        this.methodDescriptorGetAll,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/notification.NotificationService/GetAll',
    request,
    metadata || {},
    this.methodDescriptorGetAll);
  }

}

