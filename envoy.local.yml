# https://github.com/grpc/grpc-web/blob/master/net/grpc/gateway/examples/echo/envoy.yaml
# https://qiita.com/yutachaos/items/b982575971746c222864
admin:
  access_log_path: /tmp/admin_access.log
  address:
    socket_address: { address: 0.0.0.0, port_value: 9901 }

static_resources:
  listeners:
    - name: listener_0
      address:
        socket_address: { address: 0.0.0.0, port_value: 9090 }
      filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: auto
              stat_prefix: ingress_http
              route_config:
                name: local_route
                virtual_hosts:
                  - name: local_service
                    domains: ["*"]
                    routes:
                      - match: { prefix: "/" }
                        route:
                          cluster: server-go
                          timeout: 0s
                          max_stream_duration:
                            grpc_timeout_header_max: 0s
                      # - match: { prefix: "/" }
                      #   route:
                      #     cluster: server-py
                      #     timeout: 0s
                      #     max_stream_duration:
                      #       grpc_timeout_header_max: 0s
                    cors:
                      allow_origin_string_match:
                        - prefix: "*"
                      allow_methods: GET, PUT, POST, OPTIONS
                      allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,custom-header-1,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout
                      max_age: "1728000"
                      expose_headers: custom-header-1,grpc-status,grpc-message
              http_filters:
                - name: envoy.filters.http.grpc_web
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_web.v3.GrpcWeb
                - name: envoy.filters.http.cors
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors
                - name: envoy.filters.http.router
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
              # # TLS 終端のための設定
              # transport_socket:
              #   name: envoy.transport_sockets.tls
              #   typed_config:
              #     "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              #     # mTLS のための設定
              # common_tls_context:
              # validation_context:
              #   trusted_ca:
              #     filename: /etc/envoy/certs/ca.crt
              #   match_typed_subject_alt_names: []  # SAN の検証をする場合はここに書く
              # tls_certificates:
              # - certificate_chain:
              #     filename: /etc/envoy/certs/server.crt
              #   private_key:
              #     filename: /etc/envoy/certs/server.key
              # alpn_protocols: ["h2,http/1.1"]  # Python クライアントは ALPN を要求する
  clusters:
    - name: server-go
      connect_timeout: 0.25s
      type: logical_dns
      http2_protocol_options: {}
      lb_policy: round_robin
      load_assignment:
        cluster_name: cluster_0
        endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: host.docker.internal
                    port_value: 8080
    # - name: server-py
    #   connect_timeout: 0.25s
    #   type: logical_dns
    #   http2_protocol_options: {}
    #   lb_policy: round_robin
    #   load_assignment:
    #     cluster_name: cluster_0
    #     endpoints:
    #       - lb_endpoints:
    #         - endpoint:
    #             address:
    #               socket_address:
    #                 address: host.docker.internal
    #                 port_value: 8081